/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, FlexDirection, Size, } from "./interface";
export namespace Components {
    interface ArvAccordion {
        /**
          * Color variant to use.
         */
        "color": Color;
    }
    interface ArvAccordionItem {
        "active": boolean;
        "color": Color;
        "itemIndex": number;
    }
    interface ArvAlertText {
        /**
          * Color variant to use.
         */
        "color": Color;
    }
    interface ArvAvatar {
        /**
          * Alt attr of the img element.
         */
        "alt": string;
        /**
          * Image source of the img element
         */
        "imgSrc": string;
        /**
          * Size variant to set.
         */
        "size": string;
    }
    interface ArvAvatarGroup {
        /**
          * Maximun number of avatars to show.
         */
        "max"?: number;
    }
    interface ArvBadge {
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Will hide the badge.
         */
        "invisible"?: boolean;
        /**
          * Css styles to extend the component's ui
         */
        "styles"?: {
            [key: string]: string;
        };
        /**
          * Value of the badge to show.
         */
        "value"?: number;
    }
    interface ArvButton {
        /**
          * Edged corners.
         */
        "boxed"?: boolean;
        "buttonClick"?: any;
        /**
          * Color variant to use.
         */
        "color"?: Color;
        /**
          * Disable the button.
         */
        "disabled"?: boolean;
        /**
          * Fullwidth button.
         */
        "full"?: boolean;
        "icon"?: any;
        "padded"?: any;
        "rounded"?: any;
        /**
          * Size variant to use.
         */
        "size"?: Size;
        /**
          * Css styles to extend the component's ui
         */
        "styles"?: {
            [key: string]: string;
        };
        /**
          * Deprecated props
         */
        "textAlign"?: any;
        /**
          * Button variant to use.
         */
        "variant"?: "raised" | "ghost" | string;
    }
    interface ArvCard {
    }
    interface ArvCardHeader {
        "action": any;
        "avatarImage": string;
        "color": string;
        "styles": any;
        "subHeader": string;
        "titleHeader": string;
    }
    interface ArvCardMedia {
        "imageSrc": string;
    }
    interface ArvCarousel {
        "externalUrl": string;
        "images": any;
        "loading": boolean;
        "target": string;
    }
    interface ArvCheckbox {
        /**
          * Checked flag for the input element.
         */
        "checked"?: boolean;
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Disables the input element.
         */
        "disabled"?: boolean;
        /**
          * flex direction of the label and the input.
         */
        "flexDirection": FlexDirection;
        /**
          * Will show a indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * Label of the check box
         */
        "label": string;
        /**
          * Input value of the checkbox
         */
        "value"?: string;
    }
    interface ArvChip {
        /**
          * Color variant to set.
         */
        "color": Color;
        /**
          * Size variant to set.
         */
        "size": Size;
    }
    interface ArvContainer {
        "color": string;
        "containerClick": (e: MouseEvent) => void;
        "full": boolean;
        "height": string;
        "hidden": boolean;
        "margin": string;
        "max1080": boolean;
        "padding": string;
        "position": string;
        "scrollable": boolean;
        "styles": any;
        "variant": string;
        "width": string;
    }
    interface ArvDialog {
        /**
          * Dialog title shown at the header part.
         */
        "dialogTitle"?: string;
        /**
          * Disables background click to close.
         */
        "disableBgClose": boolean;
        /**
          * Will show the dialog.
         */
        "isOpen": boolean;
    }
    interface ArvDiff {
        "autoScroll": boolean;
        "controls": any[];
        "displayMode": string;
        "mergeChange": (diffArray: any[], sb: string, done: boolean) => void;
        "newVersion": any;
        "oldVersion": any;
        "showControls": boolean;
        "showLineControl": boolean;
    }
    interface ArvDivider {
        "isVertical"?: boolean;
    }
    interface ArvDraggable {
        "color": string;
        "direction": "vertical" | "horizontal";
        "disabled": boolean;
        "drag": (evt: DragEvent, key: string) => void;
        "drop": (evt: DragEvent, k1: string, k2: string) => void;
        "dropBottom": (evt: DragEvent, k1: string, k2: string) => void;
        "dropLeft": (evt: DragEvent, k1: string, k2: string) => void;
        "dropRight": (evt: DragEvent, k1: string, k2: string) => void;
        "dropTop": (evt: DragEvent, k1: string, k2: string) => void;
        "end": (evt: DragEvent, key: string) => void;
        "enter": (evt: DragEvent, key: string) => void;
        "exit": (evt: DragEvent, key: string) => void;
        "hashKey": string;
        "isLast": boolean;
        "leave": (evt: DragEvent, key: string) => void;
        "over": (evt: DragEvent, key: string) => void;
        "showIcon": boolean;
        "start": (evt: DragEvent, key: string) => void;
    }
    interface ArvDraggableWrapper {
        "layout": string;
    }
    interface ArvEditor {
        "disabled": boolean;
        "disabledTools": string[];
        "getValue": () => Promise<string>;
        "handleImage": (editor: any) => void;
        "setValue": (value: string) => Promise<void>;
    }
    interface ArvFlex {
        "alignItems": "flex-start" | "flex-end" | "center" | "stretch";
        "direction": "row" | "column" | "row-reverse" | "column-reverse";
        "expanded": boolean;
        "flex": string;
        "full"?: any;
        "fullHeight"?: any;
        "items"?: any;
        "justify": "center" | "space-between" | "space-around" | "space-evenly" | "flex-start" | "flex-end" | string;
        /**
          * Deprecated props.
         */
        "layout"?: any;
        "padded"?: any;
        "styles": {
            [key: string]: string;
        };
        "wrap": "wrap" | "no-wrap" | "wrap-reverse";
    }
    interface ArvFormControl {
    }
    interface ArvHeader {
        /**
          * Set the Color variant.
         */
        "color": Color;
        /**
          * Will not show a dropshadow.
         */
        "noShadow"?: boolean;
        /**
          * Position of the header
         */
        "position": "static" | "inherit" | "absolute" | "relative" | "fixed" | "sticky";
    }
    interface ArvIcon {
        /**
          * Color variant to use.
         */
        "color": Color;
        /**
          * Name of the icon to use
         */
        "icon": string;
        "noMargin": boolean;
        /**
          * Size variant to use.
         */
        "size": Size;
        /**
          * Css styles to extend the component's ui
         */
        "styles": {
            [key: string]: string;
        };
        /**
          * Deprecated props.
         */
        "withButtonIcon": boolean;
    }
    interface ArvImageUpload {
        "disabled": boolean;
        "hashKey": number;
        "imgSrc": string;
        "removeImage": () => void;
        "size": string;
        "uploadImage": (e: any) => void;
    }
    interface ArvInput {
        /**
          * Sets autocomplete for the input.
         */
        "autocomplete": "on" | "off";
        /**
          * Activates autocorrect for the input.
         */
        "autocorrect": "on" | "off";
        /**
          * Sets autofocus once the input loads.
         */
        "autofocus": boolean;
        /**
          * Sets the color variant to use.
         */
        "color": Color;
        /**
          * Disableds the input element.
         */
        "disabled"?: boolean;
        /**
          * Public api that returns the input element.
         */
        "getInputElement": () => Promise<any>;
        /**
          * Material icon to use.
         */
        "icon"?: string;
        "inputFocus": () => Promise<void>;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * max value for a ranged type
         */
        "max"?: string;
        /**
          * Maximum character length
         */
        "maxlength"?: number;
        /**
          * min value for a ranged type
         */
        "min"?: string;
        /**
          * Minimum character length
         */
        "minlength"?: number;
        /**
          * Name of the input element.
         */
        "name"?: string;
        /**
          * Placeholder text for the input element.
         */
        "placeholder"?: string;
        /**
          * Sets the size variant to use.
         */
        "size": Size;
        /**
          * type of input element.
         */
        "type": string;
        /**
          * Value of the input element.
         */
        "value"?: string | number | null;
    }
    interface ArvInputWrapper {
    }
    interface ArvList {
    }
    interface ArvListItem {
    }
    interface ArvLoader {
        "color": string;
        "contained": boolean;
        "size": string;
    }
    interface ArvMenu {
        "disableBackdropClick": boolean;
        "xPosition": string;
        "yPosition": string;
    }
    interface ArvMenuItem {
        /**
          * Value to pass in the arvMenuSelect event.
         */
        "value": any;
    }
    interface ArvMultipleInput {
        "add": (e: any) => void;
        "disabled": boolean;
        "inputChange": (e: any) => void;
        "inputEnter": (e: any) => void;
        "placeholder": string;
        "removeValue": (e: any) => void;
        "update": (e: any) => void;
        "values": string[];
    }
    interface ArvPaginator {
        "color": string;
        "currentPage": number;
        "itemsPerPage": number;
        "select": (index: number) => void;
        "totalItems": number;
    }
    interface ArvPaper {
        /**
          * Border only, no shadows.
         */
        "outlined"?: boolean;
        /**
          * How much shadow to be applied.
         */
        "shadowLevel"?: 0 | 1 | 2;
    }
    interface ArvRadio {
        /**
          * Checked flag for the input element.
         */
        "checked"?: boolean;
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Disables the input element.
         */
        "disabled"?: boolean;
        /**
          * flex direction of the label and the input.
         */
        "flexDirection": FlexDirection;
        /**
          * Will show a indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * Label of the radio input.
         */
        "label": string;
        /**
          * Input value of the radio input.
         */
        "value"?: string;
    }
    interface ArvSelect {
        /**
          * Color variant to use.
         */
        "color": Color;
        /**
          * Position of label and select component value.
         */
        "flexDirection": "row" | "column" | "row-reverse" | "column-reverse" | string;
        /**
          * Will occupy the available width space.
         */
        "full": boolean;
        /**
          * Label of the select component.
         */
        "label"?: string;
        /**
          * Sets the min-width and width of the label.
         */
        "labelWidth": string;
        /**
          * Callback function triggered on menu select.
         */
        "selectChange": (data: any) => void;
        /**
          * Value to display in the select component.
         */
        "value"?: string;
        /**
          * The value on selectChange will also return the event object.
         */
        "valueWithEvent"?: boolean;
    }
    interface ArvSidePane {
    }
    interface ArvSnackbar {
        "animationIn": string;
        "animationOut": string;
        "close": () => void;
        "horizontal": string;
        "icon": string;
        "message": string;
        "open": boolean;
        "timing": number;
        "top": number;
        "variant": string;
        "vertical": string;
    }
    interface ArvSpacer {
        /**
          * Will render a vertical spacer
         */
        "vertical"?: boolean;
    }
    interface ArvStepper {
        "activeIndex": number;
        /**
          * Color variant to use.
         */
        "color": Color;
        /**
          * Steps data
         */
        "steps": {
            done: boolean;
            title: string;
        }[];
    }
    interface ArvSwitch {
        "color": Color;
        "disabled": boolean;
        "value": boolean;
    }
    interface ArvTable {
        "activeSort": string;
        "controls": any[];
        "isAscending": boolean;
        "multiSelectable": boolean;
        "rowClickable": boolean;
        "select": (row: any) => void;
        "selectable": boolean;
        "sortable": boolean;
        "styles": {
            table: {};
            tbody: {};
            tr: {};
            td: {};
            thead: {};
            th: {};
            tfoot: {};
        };
        "tableData": any;
        "tableHeaders": any;
        "tableProps": {};
        "tableTitle": string;
        "titleVariant": string;
    }
    interface ArvTabs {
        /**
          * Color variant to set.
         */
        "color": Color;
        /**
          * Header will be compressed, not occupying the whole tab width.
         */
        "compressedHeader"?: boolean;
        /**
          * Tab names to appear in the tab header.
         */
        "tabNames": string;
    }
    interface ArvText {
        /**
          * Color variant to use.
         */
        "color": Color;
        /**
          * Will apply a text shadow.
         */
        "shadow"?: boolean;
        /**
          * Truncates the text with ellipsis.
         */
        "truncate"?: boolean;
    }
    interface ArvTooltip {
        /**
          * Tooltip message.
         */
        "message": string;
        /**
          * Tooltip position
         */
        "position": "top" | "bottom" | "right" | "left";
    }
    interface ArvUploader {
        "hideUploadButton": boolean;
        "placeholder": string;
        "uploadText": string;
        "uploadTextVariant": string;
    }
    interface ArvVirtual {
    }
    interface BbBolts {
        "items": any[];
    }
    interface DocContent {
        "selectedComponent": string;
    }
    interface DocControl {
        "settings": any;
    }
    interface DocHome {
    }
    interface DocHtml {
        "config": any;
        "settings": any[];
    }
    interface DocNav {
    }
    interface MyTestingComponent {
    }
    interface MyThemeSection {
    }
}
declare global {
    interface HTMLArvAccordionElement extends Components.ArvAccordion, HTMLStencilElement {
    }
    var HTMLArvAccordionElement: {
        prototype: HTMLArvAccordionElement;
        new (): HTMLArvAccordionElement;
    };
    interface HTMLArvAccordionItemElement extends Components.ArvAccordionItem, HTMLStencilElement {
    }
    var HTMLArvAccordionItemElement: {
        prototype: HTMLArvAccordionItemElement;
        new (): HTMLArvAccordionItemElement;
    };
    interface HTMLArvAlertTextElement extends Components.ArvAlertText, HTMLStencilElement {
    }
    var HTMLArvAlertTextElement: {
        prototype: HTMLArvAlertTextElement;
        new (): HTMLArvAlertTextElement;
    };
    interface HTMLArvAvatarElement extends Components.ArvAvatar, HTMLStencilElement {
    }
    var HTMLArvAvatarElement: {
        prototype: HTMLArvAvatarElement;
        new (): HTMLArvAvatarElement;
    };
    interface HTMLArvAvatarGroupElement extends Components.ArvAvatarGroup, HTMLStencilElement {
    }
    var HTMLArvAvatarGroupElement: {
        prototype: HTMLArvAvatarGroupElement;
        new (): HTMLArvAvatarGroupElement;
    };
    interface HTMLArvBadgeElement extends Components.ArvBadge, HTMLStencilElement {
    }
    var HTMLArvBadgeElement: {
        prototype: HTMLArvBadgeElement;
        new (): HTMLArvBadgeElement;
    };
    interface HTMLArvButtonElement extends Components.ArvButton, HTMLStencilElement {
    }
    var HTMLArvButtonElement: {
        prototype: HTMLArvButtonElement;
        new (): HTMLArvButtonElement;
    };
    interface HTMLArvCardElement extends Components.ArvCard, HTMLStencilElement {
    }
    var HTMLArvCardElement: {
        prototype: HTMLArvCardElement;
        new (): HTMLArvCardElement;
    };
    interface HTMLArvCardHeaderElement extends Components.ArvCardHeader, HTMLStencilElement {
    }
    var HTMLArvCardHeaderElement: {
        prototype: HTMLArvCardHeaderElement;
        new (): HTMLArvCardHeaderElement;
    };
    interface HTMLArvCardMediaElement extends Components.ArvCardMedia, HTMLStencilElement {
    }
    var HTMLArvCardMediaElement: {
        prototype: HTMLArvCardMediaElement;
        new (): HTMLArvCardMediaElement;
    };
    interface HTMLArvCarouselElement extends Components.ArvCarousel, HTMLStencilElement {
    }
    var HTMLArvCarouselElement: {
        prototype: HTMLArvCarouselElement;
        new (): HTMLArvCarouselElement;
    };
    interface HTMLArvCheckboxElement extends Components.ArvCheckbox, HTMLStencilElement {
    }
    var HTMLArvCheckboxElement: {
        prototype: HTMLArvCheckboxElement;
        new (): HTMLArvCheckboxElement;
    };
    interface HTMLArvChipElement extends Components.ArvChip, HTMLStencilElement {
    }
    var HTMLArvChipElement: {
        prototype: HTMLArvChipElement;
        new (): HTMLArvChipElement;
    };
    interface HTMLArvContainerElement extends Components.ArvContainer, HTMLStencilElement {
    }
    var HTMLArvContainerElement: {
        prototype: HTMLArvContainerElement;
        new (): HTMLArvContainerElement;
    };
    interface HTMLArvDialogElement extends Components.ArvDialog, HTMLStencilElement {
    }
    var HTMLArvDialogElement: {
        prototype: HTMLArvDialogElement;
        new (): HTMLArvDialogElement;
    };
    interface HTMLArvDiffElement extends Components.ArvDiff, HTMLStencilElement {
    }
    var HTMLArvDiffElement: {
        prototype: HTMLArvDiffElement;
        new (): HTMLArvDiffElement;
    };
    interface HTMLArvDividerElement extends Components.ArvDivider, HTMLStencilElement {
    }
    var HTMLArvDividerElement: {
        prototype: HTMLArvDividerElement;
        new (): HTMLArvDividerElement;
    };
    interface HTMLArvDraggableElement extends Components.ArvDraggable, HTMLStencilElement {
    }
    var HTMLArvDraggableElement: {
        prototype: HTMLArvDraggableElement;
        new (): HTMLArvDraggableElement;
    };
    interface HTMLArvDraggableWrapperElement extends Components.ArvDraggableWrapper, HTMLStencilElement {
    }
    var HTMLArvDraggableWrapperElement: {
        prototype: HTMLArvDraggableWrapperElement;
        new (): HTMLArvDraggableWrapperElement;
    };
    interface HTMLArvEditorElement extends Components.ArvEditor, HTMLStencilElement {
    }
    var HTMLArvEditorElement: {
        prototype: HTMLArvEditorElement;
        new (): HTMLArvEditorElement;
    };
    interface HTMLArvFlexElement extends Components.ArvFlex, HTMLStencilElement {
    }
    var HTMLArvFlexElement: {
        prototype: HTMLArvFlexElement;
        new (): HTMLArvFlexElement;
    };
    interface HTMLArvFormControlElement extends Components.ArvFormControl, HTMLStencilElement {
    }
    var HTMLArvFormControlElement: {
        prototype: HTMLArvFormControlElement;
        new (): HTMLArvFormControlElement;
    };
    interface HTMLArvHeaderElement extends Components.ArvHeader, HTMLStencilElement {
    }
    var HTMLArvHeaderElement: {
        prototype: HTMLArvHeaderElement;
        new (): HTMLArvHeaderElement;
    };
    interface HTMLArvIconElement extends Components.ArvIcon, HTMLStencilElement {
    }
    var HTMLArvIconElement: {
        prototype: HTMLArvIconElement;
        new (): HTMLArvIconElement;
    };
    interface HTMLArvImageUploadElement extends Components.ArvImageUpload, HTMLStencilElement {
    }
    var HTMLArvImageUploadElement: {
        prototype: HTMLArvImageUploadElement;
        new (): HTMLArvImageUploadElement;
    };
    interface HTMLArvInputElement extends Components.ArvInput, HTMLStencilElement {
    }
    var HTMLArvInputElement: {
        prototype: HTMLArvInputElement;
        new (): HTMLArvInputElement;
    };
    interface HTMLArvInputWrapperElement extends Components.ArvInputWrapper, HTMLStencilElement {
    }
    var HTMLArvInputWrapperElement: {
        prototype: HTMLArvInputWrapperElement;
        new (): HTMLArvInputWrapperElement;
    };
    interface HTMLArvListElement extends Components.ArvList, HTMLStencilElement {
    }
    var HTMLArvListElement: {
        prototype: HTMLArvListElement;
        new (): HTMLArvListElement;
    };
    interface HTMLArvListItemElement extends Components.ArvListItem, HTMLStencilElement {
    }
    var HTMLArvListItemElement: {
        prototype: HTMLArvListItemElement;
        new (): HTMLArvListItemElement;
    };
    interface HTMLArvLoaderElement extends Components.ArvLoader, HTMLStencilElement {
    }
    var HTMLArvLoaderElement: {
        prototype: HTMLArvLoaderElement;
        new (): HTMLArvLoaderElement;
    };
    interface HTMLArvMenuElement extends Components.ArvMenu, HTMLStencilElement {
    }
    var HTMLArvMenuElement: {
        prototype: HTMLArvMenuElement;
        new (): HTMLArvMenuElement;
    };
    interface HTMLArvMenuItemElement extends Components.ArvMenuItem, HTMLStencilElement {
    }
    var HTMLArvMenuItemElement: {
        prototype: HTMLArvMenuItemElement;
        new (): HTMLArvMenuItemElement;
    };
    interface HTMLArvMultipleInputElement extends Components.ArvMultipleInput, HTMLStencilElement {
    }
    var HTMLArvMultipleInputElement: {
        prototype: HTMLArvMultipleInputElement;
        new (): HTMLArvMultipleInputElement;
    };
    interface HTMLArvPaginatorElement extends Components.ArvPaginator, HTMLStencilElement {
    }
    var HTMLArvPaginatorElement: {
        prototype: HTMLArvPaginatorElement;
        new (): HTMLArvPaginatorElement;
    };
    interface HTMLArvPaperElement extends Components.ArvPaper, HTMLStencilElement {
    }
    var HTMLArvPaperElement: {
        prototype: HTMLArvPaperElement;
        new (): HTMLArvPaperElement;
    };
    interface HTMLArvRadioElement extends Components.ArvRadio, HTMLStencilElement {
    }
    var HTMLArvRadioElement: {
        prototype: HTMLArvRadioElement;
        new (): HTMLArvRadioElement;
    };
    interface HTMLArvSelectElement extends Components.ArvSelect, HTMLStencilElement {
    }
    var HTMLArvSelectElement: {
        prototype: HTMLArvSelectElement;
        new (): HTMLArvSelectElement;
    };
    interface HTMLArvSidePaneElement extends Components.ArvSidePane, HTMLStencilElement {
    }
    var HTMLArvSidePaneElement: {
        prototype: HTMLArvSidePaneElement;
        new (): HTMLArvSidePaneElement;
    };
    interface HTMLArvSnackbarElement extends Components.ArvSnackbar, HTMLStencilElement {
    }
    var HTMLArvSnackbarElement: {
        prototype: HTMLArvSnackbarElement;
        new (): HTMLArvSnackbarElement;
    };
    interface HTMLArvSpacerElement extends Components.ArvSpacer, HTMLStencilElement {
    }
    var HTMLArvSpacerElement: {
        prototype: HTMLArvSpacerElement;
        new (): HTMLArvSpacerElement;
    };
    interface HTMLArvStepperElement extends Components.ArvStepper, HTMLStencilElement {
    }
    var HTMLArvStepperElement: {
        prototype: HTMLArvStepperElement;
        new (): HTMLArvStepperElement;
    };
    interface HTMLArvSwitchElement extends Components.ArvSwitch, HTMLStencilElement {
    }
    var HTMLArvSwitchElement: {
        prototype: HTMLArvSwitchElement;
        new (): HTMLArvSwitchElement;
    };
    interface HTMLArvTableElement extends Components.ArvTable, HTMLStencilElement {
    }
    var HTMLArvTableElement: {
        prototype: HTMLArvTableElement;
        new (): HTMLArvTableElement;
    };
    interface HTMLArvTabsElement extends Components.ArvTabs, HTMLStencilElement {
    }
    var HTMLArvTabsElement: {
        prototype: HTMLArvTabsElement;
        new (): HTMLArvTabsElement;
    };
    interface HTMLArvTextElement extends Components.ArvText, HTMLStencilElement {
    }
    var HTMLArvTextElement: {
        prototype: HTMLArvTextElement;
        new (): HTMLArvTextElement;
    };
    interface HTMLArvTooltipElement extends Components.ArvTooltip, HTMLStencilElement {
    }
    var HTMLArvTooltipElement: {
        prototype: HTMLArvTooltipElement;
        new (): HTMLArvTooltipElement;
    };
    interface HTMLArvUploaderElement extends Components.ArvUploader, HTMLStencilElement {
    }
    var HTMLArvUploaderElement: {
        prototype: HTMLArvUploaderElement;
        new (): HTMLArvUploaderElement;
    };
    interface HTMLArvVirtualElement extends Components.ArvVirtual, HTMLStencilElement {
    }
    var HTMLArvVirtualElement: {
        prototype: HTMLArvVirtualElement;
        new (): HTMLArvVirtualElement;
    };
    interface HTMLBbBoltsElement extends Components.BbBolts, HTMLStencilElement {
    }
    var HTMLBbBoltsElement: {
        prototype: HTMLBbBoltsElement;
        new (): HTMLBbBoltsElement;
    };
    interface HTMLDocContentElement extends Components.DocContent, HTMLStencilElement {
    }
    var HTMLDocContentElement: {
        prototype: HTMLDocContentElement;
        new (): HTMLDocContentElement;
    };
    interface HTMLDocControlElement extends Components.DocControl, HTMLStencilElement {
    }
    var HTMLDocControlElement: {
        prototype: HTMLDocControlElement;
        new (): HTMLDocControlElement;
    };
    interface HTMLDocHomeElement extends Components.DocHome, HTMLStencilElement {
    }
    var HTMLDocHomeElement: {
        prototype: HTMLDocHomeElement;
        new (): HTMLDocHomeElement;
    };
    interface HTMLDocHtmlElement extends Components.DocHtml, HTMLStencilElement {
    }
    var HTMLDocHtmlElement: {
        prototype: HTMLDocHtmlElement;
        new (): HTMLDocHtmlElement;
    };
    interface HTMLDocNavElement extends Components.DocNav, HTMLStencilElement {
    }
    var HTMLDocNavElement: {
        prototype: HTMLDocNavElement;
        new (): HTMLDocNavElement;
    };
    interface HTMLMyTestingComponentElement extends Components.MyTestingComponent, HTMLStencilElement {
    }
    var HTMLMyTestingComponentElement: {
        prototype: HTMLMyTestingComponentElement;
        new (): HTMLMyTestingComponentElement;
    };
    interface HTMLMyThemeSectionElement extends Components.MyThemeSection, HTMLStencilElement {
    }
    var HTMLMyThemeSectionElement: {
        prototype: HTMLMyThemeSectionElement;
        new (): HTMLMyThemeSectionElement;
    };
    interface HTMLElementTagNameMap {
        "arv-accordion": HTMLArvAccordionElement;
        "arv-accordion-item": HTMLArvAccordionItemElement;
        "arv-alert-text": HTMLArvAlertTextElement;
        "arv-avatar": HTMLArvAvatarElement;
        "arv-avatar-group": HTMLArvAvatarGroupElement;
        "arv-badge": HTMLArvBadgeElement;
        "arv-button": HTMLArvButtonElement;
        "arv-card": HTMLArvCardElement;
        "arv-card-header": HTMLArvCardHeaderElement;
        "arv-card-media": HTMLArvCardMediaElement;
        "arv-carousel": HTMLArvCarouselElement;
        "arv-checkbox": HTMLArvCheckboxElement;
        "arv-chip": HTMLArvChipElement;
        "arv-container": HTMLArvContainerElement;
        "arv-dialog": HTMLArvDialogElement;
        "arv-diff": HTMLArvDiffElement;
        "arv-divider": HTMLArvDividerElement;
        "arv-draggable": HTMLArvDraggableElement;
        "arv-draggable-wrapper": HTMLArvDraggableWrapperElement;
        "arv-editor": HTMLArvEditorElement;
        "arv-flex": HTMLArvFlexElement;
        "arv-form-control": HTMLArvFormControlElement;
        "arv-header": HTMLArvHeaderElement;
        "arv-icon": HTMLArvIconElement;
        "arv-image-upload": HTMLArvImageUploadElement;
        "arv-input": HTMLArvInputElement;
        "arv-input-wrapper": HTMLArvInputWrapperElement;
        "arv-list": HTMLArvListElement;
        "arv-list-item": HTMLArvListItemElement;
        "arv-loader": HTMLArvLoaderElement;
        "arv-menu": HTMLArvMenuElement;
        "arv-menu-item": HTMLArvMenuItemElement;
        "arv-multiple-input": HTMLArvMultipleInputElement;
        "arv-paginator": HTMLArvPaginatorElement;
        "arv-paper": HTMLArvPaperElement;
        "arv-radio": HTMLArvRadioElement;
        "arv-select": HTMLArvSelectElement;
        "arv-side-pane": HTMLArvSidePaneElement;
        "arv-snackbar": HTMLArvSnackbarElement;
        "arv-spacer": HTMLArvSpacerElement;
        "arv-stepper": HTMLArvStepperElement;
        "arv-switch": HTMLArvSwitchElement;
        "arv-table": HTMLArvTableElement;
        "arv-tabs": HTMLArvTabsElement;
        "arv-text": HTMLArvTextElement;
        "arv-tooltip": HTMLArvTooltipElement;
        "arv-uploader": HTMLArvUploaderElement;
        "arv-virtual": HTMLArvVirtualElement;
        "bb-bolts": HTMLBbBoltsElement;
        "doc-content": HTMLDocContentElement;
        "doc-control": HTMLDocControlElement;
        "doc-home": HTMLDocHomeElement;
        "doc-html": HTMLDocHtmlElement;
        "doc-nav": HTMLDocNavElement;
        "my-testing-component": HTMLMyTestingComponentElement;
        "my-theme-section": HTMLMyThemeSectionElement;
    }
}
declare namespace LocalJSX {
    interface ArvAccordion {
        /**
          * Color variant to use.
         */
        "color"?: Color;
    }
    interface ArvAccordionItem {
        "active"?: boolean;
        "color"?: Color;
        "itemIndex"?: number;
        "onArvToggleAccordion"?: (event: CustomEvent<number>) => void;
    }
    interface ArvAlertText {
        /**
          * Color variant to use.
         */
        "color"?: Color;
    }
    interface ArvAvatar {
        /**
          * Alt attr of the img element.
         */
        "alt"?: string;
        /**
          * Image source of the img element
         */
        "imgSrc"?: string;
        /**
          * Size variant to set.
         */
        "size"?: string;
    }
    interface ArvAvatarGroup {
        /**
          * Maximun number of avatars to show.
         */
        "max"?: number;
        /**
          * Emitted when .more is clicked.
         */
        "onArvMore"?: (event: CustomEvent<any>) => void;
    }
    interface ArvBadge {
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Will hide the badge.
         */
        "invisible"?: boolean;
        /**
          * Css styles to extend the component's ui
         */
        "styles"?: {
            [key: string]: string;
        };
        /**
          * Value of the badge to show.
         */
        "value"?: number;
    }
    interface ArvButton {
        /**
          * Edged corners.
         */
        "boxed"?: boolean;
        "buttonClick"?: any;
        /**
          * Color variant to use.
         */
        "color"?: Color;
        /**
          * Disable the button.
         */
        "disabled"?: boolean;
        /**
          * Fullwidth button.
         */
        "full"?: boolean;
        "icon"?: any;
        "padded"?: any;
        "rounded"?: any;
        /**
          * Size variant to use.
         */
        "size"?: Size;
        /**
          * Css styles to extend the component's ui
         */
        "styles"?: {
            [key: string]: string;
        };
        /**
          * Deprecated props
         */
        "textAlign"?: any;
        /**
          * Button variant to use.
         */
        "variant"?: "raised" | "ghost" | string;
    }
    interface ArvCard {
    }
    interface ArvCardHeader {
        "action"?: any;
        "avatarImage"?: string;
        "color"?: string;
        "styles"?: any;
        "subHeader"?: string;
        "titleHeader"?: string;
    }
    interface ArvCardMedia {
        "imageSrc"?: string;
    }
    interface ArvCarousel {
        "externalUrl"?: string;
        "images"?: any;
        "loading"?: boolean;
        "target"?: string;
    }
    interface ArvCheckbox {
        /**
          * Checked flag for the input element.
         */
        "checked"?: boolean;
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Disables the input element.
         */
        "disabled"?: boolean;
        /**
          * flex direction of the label and the input.
         */
        "flexDirection"?: FlexDirection;
        /**
          * Will show a indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * Label of the check box
         */
        "label"?: string;
        /**
          * Emitted if checked prop has changed.
         */
        "onArvChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * Input value of the checkbox
         */
        "value"?: string;
    }
    interface ArvChip {
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Size variant to set.
         */
        "size"?: Size;
    }
    interface ArvContainer {
        "color"?: string;
        "containerClick"?: (e: MouseEvent) => void;
        "full"?: boolean;
        "height"?: string;
        "hidden"?: boolean;
        "margin"?: string;
        "max1080"?: boolean;
        "padding"?: string;
        "position"?: string;
        "scrollable"?: boolean;
        "styles"?: any;
        "variant"?: string;
        "width"?: string;
    }
    interface ArvDialog {
        /**
          * Dialog title shown at the header part.
         */
        "dialogTitle"?: string;
        /**
          * Disables background click to close.
         */
        "disableBgClose"?: boolean;
        /**
          * Will show the dialog.
         */
        "isOpen"?: boolean;
        /**
          * Listen to this event to handle close
         */
        "onArvDialogClose"?: (event: CustomEvent<any>) => void;
    }
    interface ArvDiff {
        "autoScroll"?: boolean;
        "controls"?: any[];
        "displayMode"?: string;
        "mergeChange"?: (diffArray: any[], sb: string, done: boolean) => void;
        "newVersion"?: any;
        "oldVersion"?: any;
        "showControls"?: boolean;
        "showLineControl"?: boolean;
    }
    interface ArvDivider {
        "isVertical"?: boolean;
    }
    interface ArvDraggable {
        "color"?: string;
        "direction"?: "vertical" | "horizontal";
        "disabled"?: boolean;
        "drag"?: (evt: DragEvent, key: string) => void;
        "drop"?: (evt: DragEvent, k1: string, k2: string) => void;
        "dropBottom"?: (evt: DragEvent, k1: string, k2: string) => void;
        "dropLeft"?: (evt: DragEvent, k1: string, k2: string) => void;
        "dropRight"?: (evt: DragEvent, k1: string, k2: string) => void;
        "dropTop"?: (evt: DragEvent, k1: string, k2: string) => void;
        "end"?: (evt: DragEvent, key: string) => void;
        "enter"?: (evt: DragEvent, key: string) => void;
        "exit"?: (evt: DragEvent, key: string) => void;
        "hashKey"?: string;
        "isLast"?: boolean;
        "leave"?: (evt: DragEvent, key: string) => void;
        "onItemDrag"?: (event: CustomEvent<any>) => void;
        "onItemDrop"?: (event: CustomEvent<any>) => void;
        "onItemDropBottom"?: (event: CustomEvent<any>) => void;
        "onItemDropLeft"?: (event: CustomEvent<any>) => void;
        "onItemDropRight"?: (event: CustomEvent<any>) => void;
        "onItemDropTop"?: (event: CustomEvent<any>) => void;
        "onItemEnd"?: (event: CustomEvent<any>) => void;
        "onItemEnter"?: (event: CustomEvent<any>) => void;
        "onItemExit"?: (event: CustomEvent<any>) => void;
        "onItemLeave"?: (event: CustomEvent<any>) => void;
        "onItemOver"?: (event: CustomEvent<any>) => void;
        "onItemStart"?: (event: CustomEvent<any>) => void;
        "over"?: (evt: DragEvent, key: string) => void;
        "showIcon"?: boolean;
        "start"?: (evt: DragEvent, key: string) => void;
    }
    interface ArvDraggableWrapper {
        "layout"?: string;
    }
    interface ArvEditor {
        "disabled"?: boolean;
        "disabledTools"?: string[];
        "handleImage"?: (editor: any) => void;
        "onEditorOnBlur"?: (event: CustomEvent<any>) => void;
    }
    interface ArvFlex {
        "alignItems"?: "flex-start" | "flex-end" | "center" | "stretch";
        "direction"?: "row" | "column" | "row-reverse" | "column-reverse";
        "expanded"?: boolean;
        "flex"?: string;
        "full"?: any;
        "fullHeight"?: any;
        "items"?: any;
        "justify"?: "center" | "space-between" | "space-around" | "space-evenly" | "flex-start" | "flex-end" | string;
        /**
          * Deprecated props.
         */
        "layout"?: any;
        "padded"?: any;
        "styles"?: {
            [key: string]: string;
        };
        "wrap"?: "wrap" | "no-wrap" | "wrap-reverse";
    }
    interface ArvFormControl {
    }
    interface ArvHeader {
        /**
          * Set the Color variant.
         */
        "color"?: Color;
        /**
          * Will not show a dropshadow.
         */
        "noShadow"?: boolean;
        /**
          * Position of the header
         */
        "position"?: "static" | "inherit" | "absolute" | "relative" | "fixed" | "sticky";
    }
    interface ArvIcon {
        /**
          * Color variant to use.
         */
        "color"?: Color;
        /**
          * Name of the icon to use
         */
        "icon"?: string;
        "noMargin"?: boolean;
        /**
          * Size variant to use.
         */
        "size"?: Size;
        /**
          * Css styles to extend the component's ui
         */
        "styles"?: {
            [key: string]: string;
        };
        /**
          * Deprecated props.
         */
        "withButtonIcon"?: boolean;
    }
    interface ArvImageUpload {
        "disabled"?: boolean;
        "hashKey"?: number;
        "imgSrc"?: string;
        "onArvRemoveImage"?: (event: CustomEvent<any>) => void;
        "onArvUploadImage"?: (event: CustomEvent<any>) => void;
        "removeImage"?: () => void;
        "size"?: string;
        "uploadImage"?: (e: any) => void;
    }
    interface ArvInput {
        /**
          * Sets autocomplete for the input.
         */
        "autocomplete"?: "on" | "off";
        /**
          * Activates autocorrect for the input.
         */
        "autocorrect"?: "on" | "off";
        /**
          * Sets autofocus once the input loads.
         */
        "autofocus"?: boolean;
        /**
          * Sets the color variant to use.
         */
        "color"?: Color;
        /**
          * Disableds the input element.
         */
        "disabled"?: boolean;
        /**
          * Material icon to use.
         */
        "icon"?: string;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * max value for a ranged type
         */
        "max"?: string;
        /**
          * Maximum character length
         */
        "maxlength"?: number;
        /**
          * min value for a ranged type
         */
        "min"?: string;
        /**
          * Minimum character length
         */
        "minlength"?: number;
        /**
          * Name of the input element.
         */
        "name"?: string;
        /**
          * Blur event from input
         */
        "onArvBlur"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when this.value changes
         */
        "onArvChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when input has focus
         */
        "onArvFocus"?: (event: CustomEvent<any>) => void;
        /**
          * keydown event emitted from input element.
         */
        "onArvKeydown"?: (event: CustomEvent<any>) => void;
        /**
          * Placeholder text for the input element.
         */
        "placeholder"?: string;
        /**
          * Sets the size variant to use.
         */
        "size"?: Size;
        /**
          * type of input element.
         */
        "type"?: string;
        /**
          * Value of the input element.
         */
        "value"?: string | number | null;
    }
    interface ArvInputWrapper {
    }
    interface ArvList {
    }
    interface ArvListItem {
    }
    interface ArvLoader {
        "color"?: string;
        "contained"?: boolean;
        "size"?: string;
    }
    interface ArvMenu {
        "disableBackdropClick"?: boolean;
        "xPosition"?: string;
        "yPosition"?: string;
    }
    interface ArvMenuItem {
        /**
          * Event emitted when clicked.
         */
        "onArvMenuSelect"?: (event: CustomEvent<any>) => void;
        /**
          * Value to pass in the arvMenuSelect event.
         */
        "value"?: any;
    }
    interface ArvMultipleInput {
        "add"?: (e: any) => void;
        "disabled"?: boolean;
        "inputChange"?: (e: any) => void;
        "inputEnter"?: (e: any) => void;
        "onArvAdd"?: (event: CustomEvent<any>) => void;
        "onArvInputChange"?: (event: CustomEvent<any>) => void;
        "onArvInputEnter"?: (event: CustomEvent<any>) => void;
        "onArvRemove"?: (event: CustomEvent<any>) => void;
        "onArvUpdate"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "removeValue"?: (e: any) => void;
        "update"?: (e: any) => void;
        "values"?: string[];
    }
    interface ArvPaginator {
        "color"?: string;
        "currentPage"?: number;
        "itemsPerPage"?: number;
        "onArvChange"?: (event: CustomEvent<any>) => void;
        "select"?: (index: number) => void;
        "totalItems"?: number;
    }
    interface ArvPaper {
        /**
          * Border only, no shadows.
         */
        "outlined"?: boolean;
        /**
          * How much shadow to be applied.
         */
        "shadowLevel"?: 0 | 1 | 2;
    }
    interface ArvRadio {
        /**
          * Checked flag for the input element.
         */
        "checked"?: boolean;
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Disables the input element.
         */
        "disabled"?: boolean;
        /**
          * flex direction of the label and the input.
         */
        "flexDirection"?: FlexDirection;
        /**
          * Will show a indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * Label of the radio input.
         */
        "label"?: string;
        /**
          * Emitted if checked prop has changed.
         */
        "onArvChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * Input value of the radio input.
         */
        "value"?: string;
    }
    interface ArvSelect {
        /**
          * Color variant to use.
         */
        "color"?: Color;
        /**
          * Position of label and select component value.
         */
        "flexDirection"?: "row" | "column" | "row-reverse" | "column-reverse" | string;
        /**
          * Will occupy the available width space.
         */
        "full"?: boolean;
        /**
          * Label of the select component.
         */
        "label"?: string;
        /**
          * Sets the min-width and width of the label.
         */
        "labelWidth"?: string;
        /**
          * Event fired if the menu item is clicked.
         */
        "onArvSelectChange"?: (event: CustomEvent<any>) => void;
        /**
          * Callback function triggered on menu select.
         */
        "selectChange"?: (data: any) => void;
        /**
          * Value to display in the select component.
         */
        "value"?: string;
        /**
          * The value on selectChange will also return the event object.
         */
        "valueWithEvent"?: boolean;
    }
    interface ArvSidePane {
    }
    interface ArvSnackbar {
        "animationIn"?: string;
        "animationOut"?: string;
        "close"?: () => void;
        "horizontal"?: string;
        "icon"?: string;
        "message"?: string;
        "onHandleClose"?: (event: CustomEvent<any>) => void;
        "open"?: boolean;
        "timing"?: number;
        "top"?: number;
        "variant"?: string;
        "vertical"?: string;
    }
    interface ArvSpacer {
        /**
          * Will render a vertical spacer
         */
        "vertical"?: boolean;
    }
    interface ArvStepper {
        "activeIndex"?: number;
        /**
          * Color variant to use.
         */
        "color"?: Color;
        "onArvItemClick"?: (event: CustomEvent<number>) => void;
        /**
          * Steps data
         */
        "steps"?: {
            done: boolean;
            title: string;
        }[];
    }
    interface ArvSwitch {
        "color"?: Color;
        "disabled"?: boolean;
        "value"?: boolean;
    }
    interface ArvTable {
        "activeSort"?: string;
        "controls"?: any[];
        "isAscending"?: boolean;
        "multiSelectable"?: boolean;
        "onHeaderClick"?: (event: CustomEvent<any>) => void;
        "onRowClick"?: (event: CustomEvent<any>) => void;
        "onRowItemClick"?: (event: CustomEvent<any>) => void;
        "rowClickable"?: boolean;
        "select"?: (row: any) => void;
        "selectable"?: boolean;
        "sortable"?: boolean;
        "styles"?: {
            table: {};
            tbody: {};
            tr: {};
            td: {};
            thead: {};
            th: {};
            tfoot: {};
        };
        "tableData"?: any;
        "tableHeaders"?: any;
        "tableProps"?: {};
        "tableTitle"?: string;
        "titleVariant"?: string;
    }
    interface ArvTabs {
        /**
          * Color variant to set.
         */
        "color"?: Color;
        /**
          * Header will be compressed, not occupying the whole tab width.
         */
        "compressedHeader"?: boolean;
        /**
          * Emitted on tab header click.
         */
        "onArvTabClick"?: (event: CustomEvent<number>) => void;
        /**
          * Tab names to appear in the tab header.
         */
        "tabNames"?: string;
    }
    interface ArvText {
        /**
          * Color variant to use.
         */
        "color"?: Color;
        /**
          * Will apply a text shadow.
         */
        "shadow"?: boolean;
        /**
          * Truncates the text with ellipsis.
         */
        "truncate"?: boolean;
    }
    interface ArvTooltip {
        /**
          * Tooltip message.
         */
        "message"?: string;
        /**
          * Tooltip position
         */
        "position"?: "top" | "bottom" | "right" | "left";
    }
    interface ArvUploader {
        "hideUploadButton"?: boolean;
        "onArvFilesChange"?: (event: CustomEvent<FileList>) => void;
        "placeholder"?: string;
        "uploadText"?: string;
        "uploadTextVariant"?: string;
    }
    interface ArvVirtual {
        /**
          * Trigger close handler.
         */
        "onArvVirtualClose"?: (event: CustomEvent<any>) => void;
    }
    interface BbBolts {
        "items"?: any[];
    }
    interface DocContent {
        "selectedComponent"?: string;
    }
    interface DocControl {
        "onDocSettingsChange"?: (event: CustomEvent<any>) => void;
        "settings"?: any;
    }
    interface DocHome {
    }
    interface DocHtml {
        "config"?: any;
        "settings"?: any[];
    }
    interface DocNav {
        "onDocSelectComponent"?: (event: CustomEvent<string>) => void;
    }
    interface MyTestingComponent {
    }
    interface MyThemeSection {
    }
    interface IntrinsicElements {
        "arv-accordion": ArvAccordion;
        "arv-accordion-item": ArvAccordionItem;
        "arv-alert-text": ArvAlertText;
        "arv-avatar": ArvAvatar;
        "arv-avatar-group": ArvAvatarGroup;
        "arv-badge": ArvBadge;
        "arv-button": ArvButton;
        "arv-card": ArvCard;
        "arv-card-header": ArvCardHeader;
        "arv-card-media": ArvCardMedia;
        "arv-carousel": ArvCarousel;
        "arv-checkbox": ArvCheckbox;
        "arv-chip": ArvChip;
        "arv-container": ArvContainer;
        "arv-dialog": ArvDialog;
        "arv-diff": ArvDiff;
        "arv-divider": ArvDivider;
        "arv-draggable": ArvDraggable;
        "arv-draggable-wrapper": ArvDraggableWrapper;
        "arv-editor": ArvEditor;
        "arv-flex": ArvFlex;
        "arv-form-control": ArvFormControl;
        "arv-header": ArvHeader;
        "arv-icon": ArvIcon;
        "arv-image-upload": ArvImageUpload;
        "arv-input": ArvInput;
        "arv-input-wrapper": ArvInputWrapper;
        "arv-list": ArvList;
        "arv-list-item": ArvListItem;
        "arv-loader": ArvLoader;
        "arv-menu": ArvMenu;
        "arv-menu-item": ArvMenuItem;
        "arv-multiple-input": ArvMultipleInput;
        "arv-paginator": ArvPaginator;
        "arv-paper": ArvPaper;
        "arv-radio": ArvRadio;
        "arv-select": ArvSelect;
        "arv-side-pane": ArvSidePane;
        "arv-snackbar": ArvSnackbar;
        "arv-spacer": ArvSpacer;
        "arv-stepper": ArvStepper;
        "arv-switch": ArvSwitch;
        "arv-table": ArvTable;
        "arv-tabs": ArvTabs;
        "arv-text": ArvText;
        "arv-tooltip": ArvTooltip;
        "arv-uploader": ArvUploader;
        "arv-virtual": ArvVirtual;
        "bb-bolts": BbBolts;
        "doc-content": DocContent;
        "doc-control": DocControl;
        "doc-home": DocHome;
        "doc-html": DocHtml;
        "doc-nav": DocNav;
        "my-testing-component": MyTestingComponent;
        "my-theme-section": MyThemeSection;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arv-accordion": LocalJSX.ArvAccordion & JSXBase.HTMLAttributes<HTMLArvAccordionElement>;
            "arv-accordion-item": LocalJSX.ArvAccordionItem & JSXBase.HTMLAttributes<HTMLArvAccordionItemElement>;
            "arv-alert-text": LocalJSX.ArvAlertText & JSXBase.HTMLAttributes<HTMLArvAlertTextElement>;
            "arv-avatar": LocalJSX.ArvAvatar & JSXBase.HTMLAttributes<HTMLArvAvatarElement>;
            "arv-avatar-group": LocalJSX.ArvAvatarGroup & JSXBase.HTMLAttributes<HTMLArvAvatarGroupElement>;
            "arv-badge": LocalJSX.ArvBadge & JSXBase.HTMLAttributes<HTMLArvBadgeElement>;
            "arv-button": LocalJSX.ArvButton & JSXBase.HTMLAttributes<HTMLArvButtonElement>;
            "arv-card": LocalJSX.ArvCard & JSXBase.HTMLAttributes<HTMLArvCardElement>;
            "arv-card-header": LocalJSX.ArvCardHeader & JSXBase.HTMLAttributes<HTMLArvCardHeaderElement>;
            "arv-card-media": LocalJSX.ArvCardMedia & JSXBase.HTMLAttributes<HTMLArvCardMediaElement>;
            "arv-carousel": LocalJSX.ArvCarousel & JSXBase.HTMLAttributes<HTMLArvCarouselElement>;
            "arv-checkbox": LocalJSX.ArvCheckbox & JSXBase.HTMLAttributes<HTMLArvCheckboxElement>;
            "arv-chip": LocalJSX.ArvChip & JSXBase.HTMLAttributes<HTMLArvChipElement>;
            "arv-container": LocalJSX.ArvContainer & JSXBase.HTMLAttributes<HTMLArvContainerElement>;
            "arv-dialog": LocalJSX.ArvDialog & JSXBase.HTMLAttributes<HTMLArvDialogElement>;
            "arv-diff": LocalJSX.ArvDiff & JSXBase.HTMLAttributes<HTMLArvDiffElement>;
            "arv-divider": LocalJSX.ArvDivider & JSXBase.HTMLAttributes<HTMLArvDividerElement>;
            "arv-draggable": LocalJSX.ArvDraggable & JSXBase.HTMLAttributes<HTMLArvDraggableElement>;
            "arv-draggable-wrapper": LocalJSX.ArvDraggableWrapper & JSXBase.HTMLAttributes<HTMLArvDraggableWrapperElement>;
            "arv-editor": LocalJSX.ArvEditor & JSXBase.HTMLAttributes<HTMLArvEditorElement>;
            "arv-flex": LocalJSX.ArvFlex & JSXBase.HTMLAttributes<HTMLArvFlexElement>;
            "arv-form-control": LocalJSX.ArvFormControl & JSXBase.HTMLAttributes<HTMLArvFormControlElement>;
            "arv-header": LocalJSX.ArvHeader & JSXBase.HTMLAttributes<HTMLArvHeaderElement>;
            "arv-icon": LocalJSX.ArvIcon & JSXBase.HTMLAttributes<HTMLArvIconElement>;
            "arv-image-upload": LocalJSX.ArvImageUpload & JSXBase.HTMLAttributes<HTMLArvImageUploadElement>;
            "arv-input": LocalJSX.ArvInput & JSXBase.HTMLAttributes<HTMLArvInputElement>;
            "arv-input-wrapper": LocalJSX.ArvInputWrapper & JSXBase.HTMLAttributes<HTMLArvInputWrapperElement>;
            "arv-list": LocalJSX.ArvList & JSXBase.HTMLAttributes<HTMLArvListElement>;
            "arv-list-item": LocalJSX.ArvListItem & JSXBase.HTMLAttributes<HTMLArvListItemElement>;
            "arv-loader": LocalJSX.ArvLoader & JSXBase.HTMLAttributes<HTMLArvLoaderElement>;
            "arv-menu": LocalJSX.ArvMenu & JSXBase.HTMLAttributes<HTMLArvMenuElement>;
            "arv-menu-item": LocalJSX.ArvMenuItem & JSXBase.HTMLAttributes<HTMLArvMenuItemElement>;
            "arv-multiple-input": LocalJSX.ArvMultipleInput & JSXBase.HTMLAttributes<HTMLArvMultipleInputElement>;
            "arv-paginator": LocalJSX.ArvPaginator & JSXBase.HTMLAttributes<HTMLArvPaginatorElement>;
            "arv-paper": LocalJSX.ArvPaper & JSXBase.HTMLAttributes<HTMLArvPaperElement>;
            "arv-radio": LocalJSX.ArvRadio & JSXBase.HTMLAttributes<HTMLArvRadioElement>;
            "arv-select": LocalJSX.ArvSelect & JSXBase.HTMLAttributes<HTMLArvSelectElement>;
            "arv-side-pane": LocalJSX.ArvSidePane & JSXBase.HTMLAttributes<HTMLArvSidePaneElement>;
            "arv-snackbar": LocalJSX.ArvSnackbar & JSXBase.HTMLAttributes<HTMLArvSnackbarElement>;
            "arv-spacer": LocalJSX.ArvSpacer & JSXBase.HTMLAttributes<HTMLArvSpacerElement>;
            "arv-stepper": LocalJSX.ArvStepper & JSXBase.HTMLAttributes<HTMLArvStepperElement>;
            "arv-switch": LocalJSX.ArvSwitch & JSXBase.HTMLAttributes<HTMLArvSwitchElement>;
            "arv-table": LocalJSX.ArvTable & JSXBase.HTMLAttributes<HTMLArvTableElement>;
            "arv-tabs": LocalJSX.ArvTabs & JSXBase.HTMLAttributes<HTMLArvTabsElement>;
            "arv-text": LocalJSX.ArvText & JSXBase.HTMLAttributes<HTMLArvTextElement>;
            "arv-tooltip": LocalJSX.ArvTooltip & JSXBase.HTMLAttributes<HTMLArvTooltipElement>;
            "arv-uploader": LocalJSX.ArvUploader & JSXBase.HTMLAttributes<HTMLArvUploaderElement>;
            "arv-virtual": LocalJSX.ArvVirtual & JSXBase.HTMLAttributes<HTMLArvVirtualElement>;
            "bb-bolts": LocalJSX.BbBolts & JSXBase.HTMLAttributes<HTMLBbBoltsElement>;
            "doc-content": LocalJSX.DocContent & JSXBase.HTMLAttributes<HTMLDocContentElement>;
            "doc-control": LocalJSX.DocControl & JSXBase.HTMLAttributes<HTMLDocControlElement>;
            "doc-home": LocalJSX.DocHome & JSXBase.HTMLAttributes<HTMLDocHomeElement>;
            "doc-html": LocalJSX.DocHtml & JSXBase.HTMLAttributes<HTMLDocHtmlElement>;
            "doc-nav": LocalJSX.DocNav & JSXBase.HTMLAttributes<HTMLDocNavElement>;
            "my-testing-component": LocalJSX.MyTestingComponent & JSXBase.HTMLAttributes<HTMLMyTestingComponentElement>;
            "my-theme-section": LocalJSX.MyThemeSection & JSXBase.HTMLAttributes<HTMLMyThemeSectionElement>;
        }
    }
}
