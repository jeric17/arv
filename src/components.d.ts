/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  DialogActions,
} from './components/arv-dialog/arv-dialog.model';

export namespace Components {
  interface ArvAccordion {
    'onItemChange': (index: any) => void;
  }
  interface ArvAccordionItem {
    'active': boolean;
    'animated': boolean;
    'color': string;
    'itemIndex': any;
    'itemTitle': string;
    'toggleAccordion': (itemIndex: any) => void;
  }
  interface ArvAlertText {
    'color': string;
    'icon': string;
    'textAlign': string;
  }
  interface ArvAvatar {
    'alt': string;
    'imgSrc': string;
    'size': string;
    'styles': any;
  }
  interface ArvAvatarGroup {
    'bordered': boolean;
    'imageItems': string | string[];
    'index': number;
    'maxItems': any;
    'showMore': () => void;
    'size': string;
    'styles': any;
  }
  interface ArvBackdrop {
    'onBackdropClick': (event: Event) => void;
    'position': string;
    'transparent': boolean;
  }
  interface ArvBadge {
    'badgeStyle': any;
    'color': string;
    'show': boolean;
    'size': string;
  }
  interface ArvButton {
    'buttonClick': (e: MouseEvent) => void;
    'color': string;
    'disabled': boolean;
    'full': boolean;
    'href': string;
    'icon': string;
    'layout': string;
    'loading': boolean;
    'padded': boolean;
    'roleType': string;
    'rounded': boolean;
    'size': string;
    'styles': any;
    'textAlign': string;
    'type': string;
    'variant': string;
  }
  interface ArvCard {
    'height': string;
    'styles': any;
    'width': string;
  }
  interface ArvCardHeader {
    'action': any;
    'avatarImage': string;
    'color': string;
    'styles': any;
    'subHeader': string;
    'titleHeader': string;
  }
  interface ArvCardMedia {
    'imageSrc': string;
  }
  interface ArvCarousel {
    'externalUrl': string;
    'images': any;
    'loading': boolean;
    'target': string;
  }
  interface ArvCheckbox {
    'color': string;
    'label': string;
    'labelVariant': string;
    'layout': string;
    'mode': string;
    'name': string;
    'onTick': (e: any) => void;
    'styles': any;
    'textWidth': string;
    'value': boolean;
  }
  interface ArvChips {
    'size': string;
    'target': string;
    'url': string;
    'variant': string;
  }
  interface ArvCode {}
  interface ArvContainer {
    'color': string;
    'containerClick': (e: MouseEvent) => void;
    'full': boolean;
    'height': string;
    'hidden': boolean;
    'margin': string;
    'max1080': boolean;
    'padding': string;
    'position': string;
    'scrollable': boolean;
    'styles': any;
    'variant': string;
    'width': string;
  }
  interface ArvDialog {
    'actions': DialogActions;
    'bgColor': string;
    'dialogTitle': string;
    'dialogTitleIcon': string;
    'dialogTitleVariant': string;
    'enableBackDropClose': boolean;
    'full': boolean;
    'handleClose': () => void;
    'hideClose': boolean;
    'hideTitle': boolean;
    'iconColor': string;
    'padded': boolean;
    'parent': HTMLElement;
    'scrollable': boolean;
    'show': boolean;
    'titleAlignment': string;
    'titleIconUrl': string;
    'titleImageIcon': string;
  }
  interface ArvDialogContent {
    'animation': string;
    'full': boolean;
    'padded': boolean;
  }
  interface ArvDialogPortal {
    'content': any;
    'full': boolean;
    'padded': boolean;
    'removeDialog': () => Promise<void>;
    'scrollable': boolean;
  }
  interface ArvDiff {
    'displayMode': string;
    'newVersion': any;
    'oldVersion': any;
    'showControls': boolean;
  }
  interface ArvDivider {
    'bordered': boolean;
    'height': string;
    'layout': string;
    'noMargin': boolean;
    'transparent': boolean;
    'width': string;
  }
  interface ArvDraggable {
    'color': string;
    'disabled': boolean;
    'drag': (evt: DragEvent, key: string) => void;
    'drop': (evt: DragEvent, k1: string, k2: string) => void;
    'dropTop': (evt: DragEvent, k1: string, k2: string) => void;
    'end': (evt: DragEvent, key: string) => void;
    'enter': (evt: DragEvent, key: string) => void;
    'exit': (evt: DragEvent, key: string) => void;
    'hashKey': string;
    'leave': (evt: DragEvent, key: string) => void;
    'over': (evt: DragEvent, key: string) => void;
    'showIcon': boolean;
    'start': (evt: DragEvent, key: string) => void;
  }
  interface ArvDraggableWrapper {
    'layout': string;
  }
  interface ArvEditor {
    'disabled': boolean;
    'disabledTools': string[];
    'getValue': () => Promise<string>;
    'handleImage': (editor: any) => void;
    'setValue': (value: string) => Promise<void>;
  }
  interface ArvFlex {
    'bordered': boolean;
    'content': string;
    'full': boolean;
    'fullHeight': boolean;
    'fullWidth': boolean;
    'items': string;
    'justify': string;
    'layout': string;
    'order': number;
    'padded': boolean;
    'self': string;
    'wrap': boolean;
  }
  interface ArvFluidContainer {
    'maxWidth': string;
    'minWidth': string;
  }
  interface ArvForm {
    'layout': string;
  }
  interface ArvFormControl {}
  interface ArvHeader {
    'color': string;
    'padded': boolean;
    'position': string;
    'shadow': boolean;
  }
  interface ArvIcon {
    'color': string;
    'icon': string;
    'noMargin': boolean;
    'size': string;
    'styles': any;
    'withButtonIcon': boolean;
  }
  interface ArvImageUpload {
    'disabled': boolean;
    'hashKey': number;
    'imgSrc': string;
    'removeImage': () => void;
    'size': string;
    'uploadImage': (e: any) => void;
  }
  interface ArvInfo {
    'color': string;
    'icon': string;
    'imageSrc': string;
    'infoDescription': string;
    'infoTitle': string;
    'variant': string;
  }
  interface ArvInput {
    'autocomplete': string;
    'debounceTime': number;
    'disabled': boolean;
    'elementBlur': () => Promise<void>;
    'elementFocus': () => Promise<void>;
    'fileUpload': boolean;
    'full': boolean;
    'hasBorder': boolean;
    'hasError': boolean;
    'hashKey': any;
    'icon': string;
    'input': (e: any) => void;
    'inputBlur': (e: any) => void;
    'inputChange': (e: any, error: any) => void;
    'inputEnter': (e: any) => void;
    'inputFocus': (e: any) => void;
    'inputProps': {};
    'inputSize': number;
    'inputStyle': {};
    'label': string;
    'layout': string;
    'name': string;
    'placeholder': string;
    'required': boolean;
    'rows': number;
    'size': string;
    'type': string;
    'value': string;
  }
  interface ArvInputWrapper {}
  interface ArvLink {
    'color': string;
    'styles': any;
  }
  interface ArvList {
    'color': string;
  }
  interface ArvListItem {
    'buttonSize': string;
    'icon': string;
    'itemClick': (e: any, index: number) => void;
    'itemIndex': number;
    'showDivider': boolean;
    'showIcon': boolean;
    'textAlign': string;
  }
  interface ArvLoader {
    'color': string;
    'contained': boolean;
    'size': string;
  }
  interface ArvMenu {
    'disableBackdropClick': boolean;
    'xPosition': string;
    'yPosition': string;
  }
  interface ArvMultipleInput {
    'add': (e: any) => void;
    'disabled': boolean;
    'inputChange': (e: any) => void;
    'inputEnter': (e: any) => void;
    'placeholder': string;
    'removeValue': (e: any) => void;
    'update': (e: any) => void;
    'values': string[];
  }
  interface ArvPaginator {
    'color': string;
    'currentPage': number;
    'itemsPerPage': number;
    'select': (index: number) => void;
    'totalItems': number;
  }
  interface ArvPaper {
    'box': boolean;
    'height': string;
    'noOverflow': boolean;
    'padded': boolean;
    'transparent': boolean;
    'weight': number;
    'width': string;
  }
  interface ArvScrollableContent {
    'hashKey': string;
    'onScrollTop': () => void;
    'startAt': string;
    'toBottom': () => Promise<boolean>;
    'toTop': () => Promise<void>;
  }
  interface ArvSection {
    'icon': string;
    'sectionTitle': string;
    'titleColor': string;
    'titleVariant': string;
  }
  interface ArvSectionTitle {
    'textColor': string;
    'textVariant': string;
  }
  interface ArvSelect {
    'clearInputValue': () => Promise<void>;
    'dataSource': any;
    'debounceTime': number;
    'disabled': boolean;
    'full': boolean;
    'hideIcon': boolean;
    'icon': string;
    'inputChange': (e: any) => void;
    'inputValueStyles': {};
    'label': string;
    'labelVariant': string;
    'layout': string;
    'listHeight': number;
    'loading': boolean;
    'multiple': boolean;
    'optionValue': string;
    'placeholder': string;
    'position': string;
    'removeItem': (index: number) => void;
    'selectChange': (item: any) => void;
    'selectStyles': {};
    'staticValues': string[];
    'textVariant': string;
    'toBlur': () => Promise<boolean>;
    'toggle': (show?: any) => Promise<void>;
    'value': any;
    /**
    * oneOf [select, input]
    */
    'variant': string;
  }
  interface ArvSelectOption {
    'disabled': boolean;
    'noStyle': boolean;
    'parse': boolean;
    'select': (e: any) => void;
    'selected': boolean;
    'value': any;
  }
  interface ArvSnackbar {
    'animationIn': string;
    'animationOut': string;
    'close': () => void;
    'horizontal': string;
    'icon': string;
    'message': string;
    'open': boolean;
    'timing': number;
    'top': number;
    'variant': string;
    'vertical': string;
  }
  interface ArvStepper {
    'color': string;
    'steps': any;
  }
  interface ArvSwitch {
    'color': string;
    'disabled': boolean;
    'value': boolean;
  }
  interface ArvTable {
    'activeSort': string;
    'controls': any[];
    'isAscending': boolean;
    'multiSelectable': boolean;
    'select': (row: any) => void;
    'selectable': boolean;
    'sortable': boolean;
    'styles': { table: {}; tbody: {}; tr: {}; td: {}; thead: {}; th: {}; tfoot: {}; };
    'tableData': any;
    'tableHeaders': any;
    'tableProps': {};
    'tableTitle': string;
    'titleVariant': string;
  }
  interface ArvTabs {
    'animated': boolean;
    'color': string;
    'fullHeaderWidth': boolean;
    'isDefault': boolean;
    'selectedIndex': number;
    'selectedTab': string;
    'tabChange': (index: number) => void;
    'tabs': any | string[];
  }
  interface ArvText {
    'color': string;
    'isRequired': boolean;
    'lineHeight': string;
    'maxChars': number;
    'noWrap': boolean;
    'preWrap': boolean;
    'strike': boolean;
    'strong': boolean;
    'textAlign': string;
    'textDecoration': string;
    'textOverflow': boolean;
    'textShadow': boolean;
    'variant': string;
    'weight': number;
  }
  interface ArvTooltip {
    'color': string;
    'fixed': boolean;
    'full': boolean;
    'message': string;
    'position': string;
    'show': boolean;
  }
  interface ArvTransition {
    'animation': string;
    'full': boolean;
    'transformOrigin': string;
  }
  interface ArvVirtualPortal {
    'content': any;
    'inputText': string;
    'parentEl': any;
    'select': (evt: any) => void;
    'value': string;
    'variant': string;
  }
  interface BbBolts {
    'items': any[];
  }
  interface MyComponent {}
  interface MyTestingComponent {}
  interface MyThemeSection {}
}

declare global {


  interface HTMLArvAccordionElement extends Components.ArvAccordion, HTMLStencilElement {}
  var HTMLArvAccordionElement: {
    prototype: HTMLArvAccordionElement;
    new (): HTMLArvAccordionElement;
  };

  interface HTMLArvAccordionItemElement extends Components.ArvAccordionItem, HTMLStencilElement {}
  var HTMLArvAccordionItemElement: {
    prototype: HTMLArvAccordionItemElement;
    new (): HTMLArvAccordionItemElement;
  };

  interface HTMLArvAlertTextElement extends Components.ArvAlertText, HTMLStencilElement {}
  var HTMLArvAlertTextElement: {
    prototype: HTMLArvAlertTextElement;
    new (): HTMLArvAlertTextElement;
  };

  interface HTMLArvAvatarElement extends Components.ArvAvatar, HTMLStencilElement {}
  var HTMLArvAvatarElement: {
    prototype: HTMLArvAvatarElement;
    new (): HTMLArvAvatarElement;
  };

  interface HTMLArvAvatarGroupElement extends Components.ArvAvatarGroup, HTMLStencilElement {}
  var HTMLArvAvatarGroupElement: {
    prototype: HTMLArvAvatarGroupElement;
    new (): HTMLArvAvatarGroupElement;
  };

  interface HTMLArvBackdropElement extends Components.ArvBackdrop, HTMLStencilElement {}
  var HTMLArvBackdropElement: {
    prototype: HTMLArvBackdropElement;
    new (): HTMLArvBackdropElement;
  };

  interface HTMLArvBadgeElement extends Components.ArvBadge, HTMLStencilElement {}
  var HTMLArvBadgeElement: {
    prototype: HTMLArvBadgeElement;
    new (): HTMLArvBadgeElement;
  };

  interface HTMLArvButtonElement extends Components.ArvButton, HTMLStencilElement {}
  var HTMLArvButtonElement: {
    prototype: HTMLArvButtonElement;
    new (): HTMLArvButtonElement;
  };

  interface HTMLArvCardElement extends Components.ArvCard, HTMLStencilElement {}
  var HTMLArvCardElement: {
    prototype: HTMLArvCardElement;
    new (): HTMLArvCardElement;
  };

  interface HTMLArvCardHeaderElement extends Components.ArvCardHeader, HTMLStencilElement {}
  var HTMLArvCardHeaderElement: {
    prototype: HTMLArvCardHeaderElement;
    new (): HTMLArvCardHeaderElement;
  };

  interface HTMLArvCardMediaElement extends Components.ArvCardMedia, HTMLStencilElement {}
  var HTMLArvCardMediaElement: {
    prototype: HTMLArvCardMediaElement;
    new (): HTMLArvCardMediaElement;
  };

  interface HTMLArvCarouselElement extends Components.ArvCarousel, HTMLStencilElement {}
  var HTMLArvCarouselElement: {
    prototype: HTMLArvCarouselElement;
    new (): HTMLArvCarouselElement;
  };

  interface HTMLArvCheckboxElement extends Components.ArvCheckbox, HTMLStencilElement {}
  var HTMLArvCheckboxElement: {
    prototype: HTMLArvCheckboxElement;
    new (): HTMLArvCheckboxElement;
  };

  interface HTMLArvChipsElement extends Components.ArvChips, HTMLStencilElement {}
  var HTMLArvChipsElement: {
    prototype: HTMLArvChipsElement;
    new (): HTMLArvChipsElement;
  };

  interface HTMLArvCodeElement extends Components.ArvCode, HTMLStencilElement {}
  var HTMLArvCodeElement: {
    prototype: HTMLArvCodeElement;
    new (): HTMLArvCodeElement;
  };

  interface HTMLArvContainerElement extends Components.ArvContainer, HTMLStencilElement {}
  var HTMLArvContainerElement: {
    prototype: HTMLArvContainerElement;
    new (): HTMLArvContainerElement;
  };

  interface HTMLArvDialogElement extends Components.ArvDialog, HTMLStencilElement {}
  var HTMLArvDialogElement: {
    prototype: HTMLArvDialogElement;
    new (): HTMLArvDialogElement;
  };

  interface HTMLArvDialogContentElement extends Components.ArvDialogContent, HTMLStencilElement {}
  var HTMLArvDialogContentElement: {
    prototype: HTMLArvDialogContentElement;
    new (): HTMLArvDialogContentElement;
  };

  interface HTMLArvDialogPortalElement extends Components.ArvDialogPortal, HTMLStencilElement {}
  var HTMLArvDialogPortalElement: {
    prototype: HTMLArvDialogPortalElement;
    new (): HTMLArvDialogPortalElement;
  };

  interface HTMLArvDiffElement extends Components.ArvDiff, HTMLStencilElement {}
  var HTMLArvDiffElement: {
    prototype: HTMLArvDiffElement;
    new (): HTMLArvDiffElement;
  };

  interface HTMLArvDividerElement extends Components.ArvDivider, HTMLStencilElement {}
  var HTMLArvDividerElement: {
    prototype: HTMLArvDividerElement;
    new (): HTMLArvDividerElement;
  };

  interface HTMLArvDraggableElement extends Components.ArvDraggable, HTMLStencilElement {}
  var HTMLArvDraggableElement: {
    prototype: HTMLArvDraggableElement;
    new (): HTMLArvDraggableElement;
  };

  interface HTMLArvDraggableWrapperElement extends Components.ArvDraggableWrapper, HTMLStencilElement {}
  var HTMLArvDraggableWrapperElement: {
    prototype: HTMLArvDraggableWrapperElement;
    new (): HTMLArvDraggableWrapperElement;
  };

  interface HTMLArvEditorElement extends Components.ArvEditor, HTMLStencilElement {}
  var HTMLArvEditorElement: {
    prototype: HTMLArvEditorElement;
    new (): HTMLArvEditorElement;
  };

  interface HTMLArvFlexElement extends Components.ArvFlex, HTMLStencilElement {}
  var HTMLArvFlexElement: {
    prototype: HTMLArvFlexElement;
    new (): HTMLArvFlexElement;
  };

  interface HTMLArvFluidContainerElement extends Components.ArvFluidContainer, HTMLStencilElement {}
  var HTMLArvFluidContainerElement: {
    prototype: HTMLArvFluidContainerElement;
    new (): HTMLArvFluidContainerElement;
  };

  interface HTMLArvFormElement extends Components.ArvForm, HTMLStencilElement {}
  var HTMLArvFormElement: {
    prototype: HTMLArvFormElement;
    new (): HTMLArvFormElement;
  };

  interface HTMLArvFormControlElement extends Components.ArvFormControl, HTMLStencilElement {}
  var HTMLArvFormControlElement: {
    prototype: HTMLArvFormControlElement;
    new (): HTMLArvFormControlElement;
  };

  interface HTMLArvHeaderElement extends Components.ArvHeader, HTMLStencilElement {}
  var HTMLArvHeaderElement: {
    prototype: HTMLArvHeaderElement;
    new (): HTMLArvHeaderElement;
  };

  interface HTMLArvIconElement extends Components.ArvIcon, HTMLStencilElement {}
  var HTMLArvIconElement: {
    prototype: HTMLArvIconElement;
    new (): HTMLArvIconElement;
  };

  interface HTMLArvImageUploadElement extends Components.ArvImageUpload, HTMLStencilElement {}
  var HTMLArvImageUploadElement: {
    prototype: HTMLArvImageUploadElement;
    new (): HTMLArvImageUploadElement;
  };

  interface HTMLArvInfoElement extends Components.ArvInfo, HTMLStencilElement {}
  var HTMLArvInfoElement: {
    prototype: HTMLArvInfoElement;
    new (): HTMLArvInfoElement;
  };

  interface HTMLArvInputElement extends Components.ArvInput, HTMLStencilElement {}
  var HTMLArvInputElement: {
    prototype: HTMLArvInputElement;
    new (): HTMLArvInputElement;
  };

  interface HTMLArvInputWrapperElement extends Components.ArvInputWrapper, HTMLStencilElement {}
  var HTMLArvInputWrapperElement: {
    prototype: HTMLArvInputWrapperElement;
    new (): HTMLArvInputWrapperElement;
  };

  interface HTMLArvLinkElement extends Components.ArvLink, HTMLStencilElement {}
  var HTMLArvLinkElement: {
    prototype: HTMLArvLinkElement;
    new (): HTMLArvLinkElement;
  };

  interface HTMLArvListElement extends Components.ArvList, HTMLStencilElement {}
  var HTMLArvListElement: {
    prototype: HTMLArvListElement;
    new (): HTMLArvListElement;
  };

  interface HTMLArvListItemElement extends Components.ArvListItem, HTMLStencilElement {}
  var HTMLArvListItemElement: {
    prototype: HTMLArvListItemElement;
    new (): HTMLArvListItemElement;
  };

  interface HTMLArvLoaderElement extends Components.ArvLoader, HTMLStencilElement {}
  var HTMLArvLoaderElement: {
    prototype: HTMLArvLoaderElement;
    new (): HTMLArvLoaderElement;
  };

  interface HTMLArvMenuElement extends Components.ArvMenu, HTMLStencilElement {}
  var HTMLArvMenuElement: {
    prototype: HTMLArvMenuElement;
    new (): HTMLArvMenuElement;
  };

  interface HTMLArvMultipleInputElement extends Components.ArvMultipleInput, HTMLStencilElement {}
  var HTMLArvMultipleInputElement: {
    prototype: HTMLArvMultipleInputElement;
    new (): HTMLArvMultipleInputElement;
  };

  interface HTMLArvPaginatorElement extends Components.ArvPaginator, HTMLStencilElement {}
  var HTMLArvPaginatorElement: {
    prototype: HTMLArvPaginatorElement;
    new (): HTMLArvPaginatorElement;
  };

  interface HTMLArvPaperElement extends Components.ArvPaper, HTMLStencilElement {}
  var HTMLArvPaperElement: {
    prototype: HTMLArvPaperElement;
    new (): HTMLArvPaperElement;
  };

  interface HTMLArvScrollableContentElement extends Components.ArvScrollableContent, HTMLStencilElement {}
  var HTMLArvScrollableContentElement: {
    prototype: HTMLArvScrollableContentElement;
    new (): HTMLArvScrollableContentElement;
  };

  interface HTMLArvSectionElement extends Components.ArvSection, HTMLStencilElement {}
  var HTMLArvSectionElement: {
    prototype: HTMLArvSectionElement;
    new (): HTMLArvSectionElement;
  };

  interface HTMLArvSectionTitleElement extends Components.ArvSectionTitle, HTMLStencilElement {}
  var HTMLArvSectionTitleElement: {
    prototype: HTMLArvSectionTitleElement;
    new (): HTMLArvSectionTitleElement;
  };

  interface HTMLArvSelectElement extends Components.ArvSelect, HTMLStencilElement {}
  var HTMLArvSelectElement: {
    prototype: HTMLArvSelectElement;
    new (): HTMLArvSelectElement;
  };

  interface HTMLArvSelectOptionElement extends Components.ArvSelectOption, HTMLStencilElement {}
  var HTMLArvSelectOptionElement: {
    prototype: HTMLArvSelectOptionElement;
    new (): HTMLArvSelectOptionElement;
  };

  interface HTMLArvSnackbarElement extends Components.ArvSnackbar, HTMLStencilElement {}
  var HTMLArvSnackbarElement: {
    prototype: HTMLArvSnackbarElement;
    new (): HTMLArvSnackbarElement;
  };

  interface HTMLArvStepperElement extends Components.ArvStepper, HTMLStencilElement {}
  var HTMLArvStepperElement: {
    prototype: HTMLArvStepperElement;
    new (): HTMLArvStepperElement;
  };

  interface HTMLArvSwitchElement extends Components.ArvSwitch, HTMLStencilElement {}
  var HTMLArvSwitchElement: {
    prototype: HTMLArvSwitchElement;
    new (): HTMLArvSwitchElement;
  };

  interface HTMLArvTableElement extends Components.ArvTable, HTMLStencilElement {}
  var HTMLArvTableElement: {
    prototype: HTMLArvTableElement;
    new (): HTMLArvTableElement;
  };

  interface HTMLArvTabsElement extends Components.ArvTabs, HTMLStencilElement {}
  var HTMLArvTabsElement: {
    prototype: HTMLArvTabsElement;
    new (): HTMLArvTabsElement;
  };

  interface HTMLArvTextElement extends Components.ArvText, HTMLStencilElement {}
  var HTMLArvTextElement: {
    prototype: HTMLArvTextElement;
    new (): HTMLArvTextElement;
  };

  interface HTMLArvTooltipElement extends Components.ArvTooltip, HTMLStencilElement {}
  var HTMLArvTooltipElement: {
    prototype: HTMLArvTooltipElement;
    new (): HTMLArvTooltipElement;
  };

  interface HTMLArvTransitionElement extends Components.ArvTransition, HTMLStencilElement {}
  var HTMLArvTransitionElement: {
    prototype: HTMLArvTransitionElement;
    new (): HTMLArvTransitionElement;
  };

  interface HTMLArvVirtualPortalElement extends Components.ArvVirtualPortal, HTMLStencilElement {}
  var HTMLArvVirtualPortalElement: {
    prototype: HTMLArvVirtualPortalElement;
    new (): HTMLArvVirtualPortalElement;
  };

  interface HTMLBbBoltsElement extends Components.BbBolts, HTMLStencilElement {}
  var HTMLBbBoltsElement: {
    prototype: HTMLBbBoltsElement;
    new (): HTMLBbBoltsElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLMyTestingComponentElement extends Components.MyTestingComponent, HTMLStencilElement {}
  var HTMLMyTestingComponentElement: {
    prototype: HTMLMyTestingComponentElement;
    new (): HTMLMyTestingComponentElement;
  };

  interface HTMLMyThemeSectionElement extends Components.MyThemeSection, HTMLStencilElement {}
  var HTMLMyThemeSectionElement: {
    prototype: HTMLMyThemeSectionElement;
    new (): HTMLMyThemeSectionElement;
  };
  interface HTMLElementTagNameMap {
    'arv-accordion': HTMLArvAccordionElement;
    'arv-accordion-item': HTMLArvAccordionItemElement;
    'arv-alert-text': HTMLArvAlertTextElement;
    'arv-avatar': HTMLArvAvatarElement;
    'arv-avatar-group': HTMLArvAvatarGroupElement;
    'arv-backdrop': HTMLArvBackdropElement;
    'arv-badge': HTMLArvBadgeElement;
    'arv-button': HTMLArvButtonElement;
    'arv-card': HTMLArvCardElement;
    'arv-card-header': HTMLArvCardHeaderElement;
    'arv-card-media': HTMLArvCardMediaElement;
    'arv-carousel': HTMLArvCarouselElement;
    'arv-checkbox': HTMLArvCheckboxElement;
    'arv-chips': HTMLArvChipsElement;
    'arv-code': HTMLArvCodeElement;
    'arv-container': HTMLArvContainerElement;
    'arv-dialog': HTMLArvDialogElement;
    'arv-dialog-content': HTMLArvDialogContentElement;
    'arv-dialog-portal': HTMLArvDialogPortalElement;
    'arv-diff': HTMLArvDiffElement;
    'arv-divider': HTMLArvDividerElement;
    'arv-draggable': HTMLArvDraggableElement;
    'arv-draggable-wrapper': HTMLArvDraggableWrapperElement;
    'arv-editor': HTMLArvEditorElement;
    'arv-flex': HTMLArvFlexElement;
    'arv-fluid-container': HTMLArvFluidContainerElement;
    'arv-form': HTMLArvFormElement;
    'arv-form-control': HTMLArvFormControlElement;
    'arv-header': HTMLArvHeaderElement;
    'arv-icon': HTMLArvIconElement;
    'arv-image-upload': HTMLArvImageUploadElement;
    'arv-info': HTMLArvInfoElement;
    'arv-input': HTMLArvInputElement;
    'arv-input-wrapper': HTMLArvInputWrapperElement;
    'arv-link': HTMLArvLinkElement;
    'arv-list': HTMLArvListElement;
    'arv-list-item': HTMLArvListItemElement;
    'arv-loader': HTMLArvLoaderElement;
    'arv-menu': HTMLArvMenuElement;
    'arv-multiple-input': HTMLArvMultipleInputElement;
    'arv-paginator': HTMLArvPaginatorElement;
    'arv-paper': HTMLArvPaperElement;
    'arv-scrollable-content': HTMLArvScrollableContentElement;
    'arv-section': HTMLArvSectionElement;
    'arv-section-title': HTMLArvSectionTitleElement;
    'arv-select': HTMLArvSelectElement;
    'arv-select-option': HTMLArvSelectOptionElement;
    'arv-snackbar': HTMLArvSnackbarElement;
    'arv-stepper': HTMLArvStepperElement;
    'arv-switch': HTMLArvSwitchElement;
    'arv-table': HTMLArvTableElement;
    'arv-tabs': HTMLArvTabsElement;
    'arv-text': HTMLArvTextElement;
    'arv-tooltip': HTMLArvTooltipElement;
    'arv-transition': HTMLArvTransitionElement;
    'arv-virtual-portal': HTMLArvVirtualPortalElement;
    'bb-bolts': HTMLBbBoltsElement;
    'my-component': HTMLMyComponentElement;
    'my-testing-component': HTMLMyTestingComponentElement;
    'my-theme-section': HTMLMyThemeSectionElement;
  }
}

declare namespace LocalJSX {
  interface ArvAccordion extends JSXBase.HTMLAttributes<HTMLArvAccordionElement> {
    'onItemChange'?: (index: any) => void;
  }
  interface ArvAccordionItem extends JSXBase.HTMLAttributes<HTMLArvAccordionItemElement> {
    'active'?: boolean;
    'animated'?: boolean;
    'color'?: string;
    'itemIndex'?: any;
    'itemTitle'?: string;
    'onArvToggleAccordion'?: (event: CustomEvent<any>) => void;
    'toggleAccordion'?: (itemIndex: any) => void;
  }
  interface ArvAlertText extends JSXBase.HTMLAttributes<HTMLArvAlertTextElement> {
    'color'?: string;
    'icon'?: string;
    'textAlign'?: string;
  }
  interface ArvAvatar extends JSXBase.HTMLAttributes<HTMLArvAvatarElement> {
    'alt'?: string;
    'imgSrc'?: string;
    'size'?: string;
    'styles'?: any;
  }
  interface ArvAvatarGroup extends JSXBase.HTMLAttributes<HTMLArvAvatarGroupElement> {
    'bordered'?: boolean;
    'imageItems'?: string | string[];
    'index'?: number;
    'maxItems'?: any;
    'onOnShowMore'?: (event: CustomEvent<any>) => void;
    'showMore'?: () => void;
    'size'?: string;
    'styles'?: any;
  }
  interface ArvBackdrop extends JSXBase.HTMLAttributes<HTMLArvBackdropElement> {
    'onBackdropClick'?: (event: Event) => void;
    'position'?: string;
    'transparent'?: boolean;
  }
  interface ArvBadge extends JSXBase.HTMLAttributes<HTMLArvBadgeElement> {
    'badgeStyle'?: any;
    'color'?: string;
    'show'?: boolean;
    'size'?: string;
  }
  interface ArvButton extends JSXBase.HTMLAttributes<HTMLArvButtonElement> {
    'buttonClick'?: (e: MouseEvent) => void;
    'color'?: string;
    'disabled'?: boolean;
    'full'?: boolean;
    'href'?: string;
    'icon'?: string;
    'layout'?: string;
    'loading'?: boolean;
    'onArvButtonClick'?: (event: CustomEvent<any>) => void;
    'padded'?: boolean;
    'roleType'?: string;
    'rounded'?: boolean;
    'size'?: string;
    'styles'?: any;
    'textAlign'?: string;
    'type'?: string;
    'variant'?: string;
  }
  interface ArvCard extends JSXBase.HTMLAttributes<HTMLArvCardElement> {
    'height'?: string;
    'styles'?: any;
    'width'?: string;
  }
  interface ArvCardHeader extends JSXBase.HTMLAttributes<HTMLArvCardHeaderElement> {
    'action'?: any;
    'avatarImage'?: string;
    'color'?: string;
    'styles'?: any;
    'subHeader'?: string;
    'titleHeader'?: string;
  }
  interface ArvCardMedia extends JSXBase.HTMLAttributes<HTMLArvCardMediaElement> {
    'imageSrc'?: string;
  }
  interface ArvCarousel extends JSXBase.HTMLAttributes<HTMLArvCarouselElement> {
    'externalUrl'?: string;
    'images'?: any;
    'loading'?: boolean;
    'target'?: string;
  }
  interface ArvCheckbox extends JSXBase.HTMLAttributes<HTMLArvCheckboxElement> {
    'color'?: string;
    'label'?: string;
    'labelVariant'?: string;
    'layout'?: string;
    'mode'?: string;
    'name'?: string;
    'onArvInputChange'?: (event: CustomEvent<any>) => void;
    'onTick'?: (e: any) => void;
    'styles'?: any;
    'textWidth'?: string;
    'value'?: boolean;
  }
  interface ArvChips extends JSXBase.HTMLAttributes<HTMLArvChipsElement> {
    'size'?: string;
    'target'?: string;
    'url'?: string;
    'variant'?: string;
  }
  interface ArvCode extends JSXBase.HTMLAttributes<HTMLArvCodeElement> {}
  interface ArvContainer extends JSXBase.HTMLAttributes<HTMLArvContainerElement> {
    'color'?: string;
    'containerClick'?: (e: MouseEvent) => void;
    'full'?: boolean;
    'height'?: string;
    'hidden'?: boolean;
    'margin'?: string;
    'max1080'?: boolean;
    'padding'?: string;
    'position'?: string;
    'scrollable'?: boolean;
    'styles'?: any;
    'variant'?: string;
    'width'?: string;
  }
  interface ArvDialog extends JSXBase.HTMLAttributes<HTMLArvDialogElement> {
    'actions'?: DialogActions;
    'bgColor'?: string;
    'dialogTitle'?: string;
    'dialogTitleIcon'?: string;
    'dialogTitleVariant'?: string;
    'enableBackDropClose'?: boolean;
    'full'?: boolean;
    'handleClose'?: () => void;
    'hideClose'?: boolean;
    'hideTitle'?: boolean;
    'iconColor'?: string;
    'onArvClose'?: (event: CustomEvent<any>) => void;
    'onArvOk'?: (event: CustomEvent<any>) => void;
    'padded'?: boolean;
    'parent'?: HTMLElement;
    'scrollable'?: boolean;
    'show'?: boolean;
    'titleAlignment'?: string;
    'titleIconUrl'?: string;
    'titleImageIcon'?: string;
  }
  interface ArvDialogContent extends JSXBase.HTMLAttributes<HTMLArvDialogContentElement> {
    'animation'?: string;
    'full'?: boolean;
    'padded'?: boolean;
  }
  interface ArvDialogPortal extends JSXBase.HTMLAttributes<HTMLArvDialogPortalElement> {
    'content'?: any;
    'full'?: boolean;
    'padded'?: boolean;
    'scrollable'?: boolean;
  }
  interface ArvDiff extends JSXBase.HTMLAttributes<HTMLArvDiffElement> {
    'displayMode'?: string;
    'newVersion'?: any;
    'oldVersion'?: any;
    'showControls'?: boolean;
  }
  interface ArvDivider extends JSXBase.HTMLAttributes<HTMLArvDividerElement> {
    'bordered'?: boolean;
    'height'?: string;
    'layout'?: string;
    'noMargin'?: boolean;
    'transparent'?: boolean;
    'width'?: string;
  }
  interface ArvDraggable extends JSXBase.HTMLAttributes<HTMLArvDraggableElement> {
    'color'?: string;
    'disabled'?: boolean;
    'drag'?: (evt: DragEvent, key: string) => void;
    'drop'?: (evt: DragEvent, k1: string, k2: string) => void;
    'dropTop'?: (evt: DragEvent, k1: string, k2: string) => void;
    'end'?: (evt: DragEvent, key: string) => void;
    'enter'?: (evt: DragEvent, key: string) => void;
    'exit'?: (evt: DragEvent, key: string) => void;
    'hashKey'?: string;
    'leave'?: (evt: DragEvent, key: string) => void;
    'onItemDrag'?: (event: CustomEvent<any>) => void;
    'onItemDrop'?: (event: CustomEvent<any>) => void;
    'onItemDropTop'?: (event: CustomEvent<any>) => void;
    'onItemEnd'?: (event: CustomEvent<any>) => void;
    'onItemEnter'?: (event: CustomEvent<any>) => void;
    'onItemExit'?: (event: CustomEvent<any>) => void;
    'onItemLeave'?: (event: CustomEvent<any>) => void;
    'onItemOver'?: (event: CustomEvent<any>) => void;
    'onItemStart'?: (event: CustomEvent<any>) => void;
    'over'?: (evt: DragEvent, key: string) => void;
    'showIcon'?: boolean;
    'start'?: (evt: DragEvent, key: string) => void;
  }
  interface ArvDraggableWrapper extends JSXBase.HTMLAttributes<HTMLArvDraggableWrapperElement> {
    'layout'?: string;
  }
  interface ArvEditor extends JSXBase.HTMLAttributes<HTMLArvEditorElement> {
    'disabled'?: boolean;
    'disabledTools'?: string[];
    'handleImage'?: (editor: any) => void;
    'onEditorOnBlur'?: (event: CustomEvent<any>) => void;
  }
  interface ArvFlex extends JSXBase.HTMLAttributes<HTMLArvFlexElement> {
    'bordered'?: boolean;
    'content'?: string;
    'full'?: boolean;
    'fullHeight'?: boolean;
    'fullWidth'?: boolean;
    'items'?: string;
    'justify'?: string;
    'layout'?: string;
    'order'?: number;
    'padded'?: boolean;
    'self'?: string;
    'wrap'?: boolean;
  }
  interface ArvFluidContainer extends JSXBase.HTMLAttributes<HTMLArvFluidContainerElement> {
    'maxWidth'?: string;
    'minWidth'?: string;
  }
  interface ArvForm extends JSXBase.HTMLAttributes<HTMLArvFormElement> {
    'layout'?: string;
    'onOnFormSubmit'?: (event: CustomEvent<any>) => void;
  }
  interface ArvFormControl extends JSXBase.HTMLAttributes<HTMLArvFormControlElement> {}
  interface ArvHeader extends JSXBase.HTMLAttributes<HTMLArvHeaderElement> {
    'color'?: string;
    'padded'?: boolean;
    'position'?: string;
    'shadow'?: boolean;
  }
  interface ArvIcon extends JSXBase.HTMLAttributes<HTMLArvIconElement> {
    'color'?: string;
    'icon'?: string;
    'noMargin'?: boolean;
    'size'?: string;
    'styles'?: any;
    'withButtonIcon'?: boolean;
  }
  interface ArvImageUpload extends JSXBase.HTMLAttributes<HTMLArvImageUploadElement> {
    'disabled'?: boolean;
    'hashKey'?: number;
    'imgSrc'?: string;
    'onArvRemoveImage'?: (event: CustomEvent<any>) => void;
    'onArvUploadImage'?: (event: CustomEvent<any>) => void;
    'removeImage'?: () => void;
    'size'?: string;
    'uploadImage'?: (e: any) => void;
  }
  interface ArvInfo extends JSXBase.HTMLAttributes<HTMLArvInfoElement> {
    'color'?: string;
    'icon'?: string;
    'imageSrc'?: string;
    'infoDescription'?: string;
    'infoTitle'?: string;
    'variant'?: string;
  }
  interface ArvInput extends JSXBase.HTMLAttributes<HTMLArvInputElement> {
    'autocomplete'?: string;
    'debounceTime'?: number;
    'disabled'?: boolean;
    'fileUpload'?: boolean;
    'full'?: boolean;
    'hasBorder'?: boolean;
    'hasError'?: boolean;
    'hashKey'?: any;
    'icon'?: string;
    'input'?: (e: any) => void;
    'inputBlur'?: (e: any) => void;
    'inputChange'?: (e: any, error: any) => void;
    'inputEnter'?: (e: any) => void;
    'inputFocus'?: (e: any) => void;
    'inputProps'?: {};
    'inputSize'?: number;
    'inputStyle'?: {};
    'label'?: string;
    'layout'?: string;
    'name'?: string;
    'onArvBlur'?: (event: CustomEvent<any>) => void;
    'onArvFocus'?: (event: CustomEvent<any>) => void;
    'onArvInput'?: (event: CustomEvent<any>) => void;
    'onArvInputChange'?: (event: CustomEvent<any>) => void;
    'onArvInputEnter'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    'required'?: boolean;
    'rows'?: number;
    'size'?: string;
    'type'?: string;
    'value'?: string;
  }
  interface ArvInputWrapper extends JSXBase.HTMLAttributes<HTMLArvInputWrapperElement> {}
  interface ArvLink extends JSXBase.HTMLAttributes<HTMLArvLinkElement> {
    'color'?: string;
    'styles'?: any;
  }
  interface ArvList extends JSXBase.HTMLAttributes<HTMLArvListElement> {
    'color'?: string;
  }
  interface ArvListItem extends JSXBase.HTMLAttributes<HTMLArvListItemElement> {
    'buttonSize'?: string;
    'icon'?: string;
    'itemClick'?: (e: any, index: number) => void;
    'itemIndex'?: number;
    'onArvItemClick'?: (event: CustomEvent<any>) => void;
    'showDivider'?: boolean;
    'showIcon'?: boolean;
    'textAlign'?: string;
  }
  interface ArvLoader extends JSXBase.HTMLAttributes<HTMLArvLoaderElement> {
    'color'?: string;
    'contained'?: boolean;
    'size'?: string;
  }
  interface ArvMenu extends JSXBase.HTMLAttributes<HTMLArvMenuElement> {
    'disableBackdropClick'?: boolean;
    'xPosition'?: string;
    'yPosition'?: string;
  }
  interface ArvMultipleInput extends JSXBase.HTMLAttributes<HTMLArvMultipleInputElement> {
    'add'?: (e: any) => void;
    'disabled'?: boolean;
    'inputChange'?: (e: any) => void;
    'inputEnter'?: (e: any) => void;
    'onArvAdd'?: (event: CustomEvent<any>) => void;
    'onArvInputChange'?: (event: CustomEvent<any>) => void;
    'onArvInputEnter'?: (event: CustomEvent<any>) => void;
    'onArvRemove'?: (event: CustomEvent<any>) => void;
    'onArvUpdate'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    'removeValue'?: (e: any) => void;
    'update'?: (e: any) => void;
    'values'?: string[];
  }
  interface ArvPaginator extends JSXBase.HTMLAttributes<HTMLArvPaginatorElement> {
    'color'?: string;
    'currentPage'?: number;
    'itemsPerPage'?: number;
    'onArvChange'?: (event: CustomEvent<any>) => void;
    'select'?: (index: number) => void;
    'totalItems'?: number;
  }
  interface ArvPaper extends JSXBase.HTMLAttributes<HTMLArvPaperElement> {
    'box'?: boolean;
    'height'?: string;
    'noOverflow'?: boolean;
    'padded'?: boolean;
    'transparent'?: boolean;
    'weight'?: number;
    'width'?: string;
  }
  interface ArvScrollableContent extends JSXBase.HTMLAttributes<HTMLArvScrollableContentElement> {
    'hashKey'?: string;
    'onArvScrolledTop'?: (event: CustomEvent<any>) => void;
    'onScrollTop'?: () => void;
    'startAt'?: string;
  }
  interface ArvSection extends JSXBase.HTMLAttributes<HTMLArvSectionElement> {
    'icon'?: string;
    'sectionTitle'?: string;
    'titleColor'?: string;
    'titleVariant'?: string;
  }
  interface ArvSectionTitle extends JSXBase.HTMLAttributes<HTMLArvSectionTitleElement> {
    'textColor'?: string;
    'textVariant'?: string;
  }
  interface ArvSelect extends JSXBase.HTMLAttributes<HTMLArvSelectElement> {
    'dataSource'?: any;
    'debounceTime'?: number;
    'disabled'?: boolean;
    'full'?: boolean;
    'hideIcon'?: boolean;
    'icon'?: string;
    'inputChange'?: (e: any) => void;
    'inputValueStyles'?: {};
    'label'?: string;
    'labelVariant'?: string;
    'layout'?: string;
    'listHeight'?: number;
    'loading'?: boolean;
    'multiple'?: boolean;
    'onArvInput'?: (event: CustomEvent<any>) => void;
    'onArvInputChange'?: (event: CustomEvent<any>) => void;
    'onArvRemoveItem'?: (event: CustomEvent<any>) => void;
    'onArvSelectChange'?: (event: CustomEvent<any>) => void;
    'optionValue'?: string;
    'placeholder'?: string;
    'position'?: string;
    'removeItem'?: (index: number) => void;
    'selectChange'?: (item: any) => void;
    'selectStyles'?: {};
    'staticValues'?: string[];
    'textVariant'?: string;
    'value'?: any;
    /**
    * oneOf [select, input]
    */
    'variant'?: string;
  }
  interface ArvSelectOption extends JSXBase.HTMLAttributes<HTMLArvSelectOptionElement> {
    'disabled'?: boolean;
    'noStyle'?: boolean;
    'onOptionSelected'?: (event: CustomEvent<any>) => void;
    'parse'?: boolean;
    'select'?: (e: any) => void;
    'selected'?: boolean;
    'value'?: any;
  }
  interface ArvSnackbar extends JSXBase.HTMLAttributes<HTMLArvSnackbarElement> {
    'animationIn'?: string;
    'animationOut'?: string;
    'close'?: () => void;
    'horizontal'?: string;
    'icon'?: string;
    'message'?: string;
    'onHandleClose'?: (event: CustomEvent<any>) => void;
    'open'?: boolean;
    'timing'?: number;
    'top'?: number;
    'variant'?: string;
    'vertical'?: string;
  }
  interface ArvStepper extends JSXBase.HTMLAttributes<HTMLArvStepperElement> {
    'color'?: string;
    'steps'?: any;
  }
  interface ArvSwitch extends JSXBase.HTMLAttributes<HTMLArvSwitchElement> {
    'color'?: string;
    'disabled'?: boolean;
    'value'?: boolean;
  }
  interface ArvTable extends JSXBase.HTMLAttributes<HTMLArvTableElement> {
    'activeSort'?: string;
    'controls'?: any[];
    'isAscending'?: boolean;
    'multiSelectable'?: boolean;
    'onHeaderClick'?: (event: CustomEvent<any>) => void;
    'onRowClick'?: (event: CustomEvent<any>) => void;
    'onRowItemClick'?: (event: CustomEvent<any>) => void;
    'select'?: (row: any) => void;
    'selectable'?: boolean;
    'sortable'?: boolean;
    'styles'?: { table: {}; tbody: {}; tr: {}; td: {}; thead: {}; th: {}; tfoot: {}; };
    'tableData'?: any;
    'tableHeaders'?: any;
    'tableProps'?: {};
    'tableTitle'?: string;
    'titleVariant'?: string;
  }
  interface ArvTabs extends JSXBase.HTMLAttributes<HTMLArvTabsElement> {
    'animated'?: boolean;
    'color'?: string;
    'fullHeaderWidth'?: boolean;
    'isDefault'?: boolean;
    'selectedIndex'?: number;
    'selectedTab'?: string;
    'tabChange'?: (index: number) => void;
    'tabs'?: any | string[];
  }
  interface ArvText extends JSXBase.HTMLAttributes<HTMLArvTextElement> {
    'color'?: string;
    'isRequired'?: boolean;
    'lineHeight'?: string;
    'maxChars'?: number;
    'noWrap'?: boolean;
    'preWrap'?: boolean;
    'strike'?: boolean;
    'strong'?: boolean;
    'textAlign'?: string;
    'textDecoration'?: string;
    'textOverflow'?: boolean;
    'textShadow'?: boolean;
    'variant'?: string;
    'weight'?: number;
  }
  interface ArvTooltip extends JSXBase.HTMLAttributes<HTMLArvTooltipElement> {
    'color'?: string;
    'fixed'?: boolean;
    'full'?: boolean;
    'message'?: string;
    'position'?: string;
    'show'?: boolean;
  }
  interface ArvTransition extends JSXBase.HTMLAttributes<HTMLArvTransitionElement> {
    'animation'?: string;
    'full'?: boolean;
    'transformOrigin'?: string;
  }
  interface ArvVirtualPortal extends JSXBase.HTMLAttributes<HTMLArvVirtualPortalElement> {
    'content'?: any;
    'inputText'?: string;
    'parentEl'?: any;
    'select'?: (evt: any) => void;
    'value'?: string;
    'variant'?: string;
  }
  interface BbBolts extends JSXBase.HTMLAttributes<HTMLBbBoltsElement> {
    'items'?: any[];
  }
  interface MyComponent extends JSXBase.HTMLAttributes<HTMLMyComponentElement> {}
  interface MyTestingComponent extends JSXBase.HTMLAttributes<HTMLMyTestingComponentElement> {}
  interface MyThemeSection extends JSXBase.HTMLAttributes<HTMLMyThemeSectionElement> {}

  interface IntrinsicElements {
    'arv-accordion': ArvAccordion;
    'arv-accordion-item': ArvAccordionItem;
    'arv-alert-text': ArvAlertText;
    'arv-avatar': ArvAvatar;
    'arv-avatar-group': ArvAvatarGroup;
    'arv-backdrop': ArvBackdrop;
    'arv-badge': ArvBadge;
    'arv-button': ArvButton;
    'arv-card': ArvCard;
    'arv-card-header': ArvCardHeader;
    'arv-card-media': ArvCardMedia;
    'arv-carousel': ArvCarousel;
    'arv-checkbox': ArvCheckbox;
    'arv-chips': ArvChips;
    'arv-code': ArvCode;
    'arv-container': ArvContainer;
    'arv-dialog': ArvDialog;
    'arv-dialog-content': ArvDialogContent;
    'arv-dialog-portal': ArvDialogPortal;
    'arv-diff': ArvDiff;
    'arv-divider': ArvDivider;
    'arv-draggable': ArvDraggable;
    'arv-draggable-wrapper': ArvDraggableWrapper;
    'arv-editor': ArvEditor;
    'arv-flex': ArvFlex;
    'arv-fluid-container': ArvFluidContainer;
    'arv-form': ArvForm;
    'arv-form-control': ArvFormControl;
    'arv-header': ArvHeader;
    'arv-icon': ArvIcon;
    'arv-image-upload': ArvImageUpload;
    'arv-info': ArvInfo;
    'arv-input': ArvInput;
    'arv-input-wrapper': ArvInputWrapper;
    'arv-link': ArvLink;
    'arv-list': ArvList;
    'arv-list-item': ArvListItem;
    'arv-loader': ArvLoader;
    'arv-menu': ArvMenu;
    'arv-multiple-input': ArvMultipleInput;
    'arv-paginator': ArvPaginator;
    'arv-paper': ArvPaper;
    'arv-scrollable-content': ArvScrollableContent;
    'arv-section': ArvSection;
    'arv-section-title': ArvSectionTitle;
    'arv-select': ArvSelect;
    'arv-select-option': ArvSelectOption;
    'arv-snackbar': ArvSnackbar;
    'arv-stepper': ArvStepper;
    'arv-switch': ArvSwitch;
    'arv-table': ArvTable;
    'arv-tabs': ArvTabs;
    'arv-text': ArvText;
    'arv-tooltip': ArvTooltip;
    'arv-transition': ArvTransition;
    'arv-virtual-portal': ArvVirtualPortal;
    'bb-bolts': BbBolts;
    'my-component': MyComponent;
    'my-testing-component': MyTestingComponent;
    'my-theme-section': MyThemeSection;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


